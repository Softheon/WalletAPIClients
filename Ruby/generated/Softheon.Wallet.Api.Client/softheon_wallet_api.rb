# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Softheon.Wallet.Api.Client
  #
  # A service client - single point of access to the REST API.
  #
  class SoftheonWalletAPI < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return Subscription credentials which uniquely identify client
    # subscription.
    attr_accessor :credentials

    #
    # Creates initializes a new instance of the SoftheonWalletAPI class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'https://hack.softheon.io/api/payments'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url
      if(!options[:headers].nil? && !options[:headers]['Content-Type'].nil?)
        @request_headers['Content-Type'] = options[:headers]['Content-Type']
      end

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Gets all bank accounts associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_bank_accounts_by_reference_id(reference_id, custom_headers:nil)
      response = get_bank_accounts_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all bank accounts associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_bank_accounts_by_reference_id_with_http_info(reference_id, custom_headers:nil)
      get_bank_accounts_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all bank accounts associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_bank_accounts_by_reference_id_async(reference_id, custom_headers:nil)
      fail ArgumentError, 'reference_id is nil' if reference_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/bankaccounts'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'referenceId' => reference_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'BankAccountModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'BankAccountModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a bank account.
    #
    # @param update_bank_account_model [UpdateBankAccountModel] The update bank
    # account model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_bank_account(update_bank_account_model, custom_headers:nil)
      response = update_bank_account_async(update_bank_account_model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a bank account.
    #
    # @param update_bank_account_model [UpdateBankAccountModel] The update bank
    # account model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_bank_account_with_http_info(update_bank_account_model, custom_headers:nil)
      update_bank_account_async(update_bank_account_model, custom_headers:custom_headers).value!
    end

    #
    # Updates a bank account.
    #
    # @param update_bank_account_model [UpdateBankAccountModel] The update bank
    # account model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_bank_account_async(update_bank_account_model, custom_headers:nil)
      fail ArgumentError, 'update_bank_account_model is nil' if update_bank_account_model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::UpdateBankAccountModel.mapper()
      request_content = self.serialize(request_mapper,  update_bank_account_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/bankaccounts'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Posts a new bank account.
    #
    # @param bank_account_request [BankAccountRequestModel] The bank account.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BankAccountResponseModel] operation results.
    #
    def create_bank_account(bank_account_request, custom_headers:nil)
      response = create_bank_account_async(bank_account_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts a new bank account.
    #
    # @param bank_account_request [BankAccountRequestModel] The bank account.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_bank_account_with_http_info(bank_account_request, custom_headers:nil)
      create_bank_account_async(bank_account_request, custom_headers:custom_headers).value!
    end

    #
    # Posts a new bank account.
    #
    # @param bank_account_request [BankAccountRequestModel] The bank account.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_bank_account_async(bank_account_request, custom_headers:nil)
      fail ArgumentError, 'bank_account_request is nil' if bank_account_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::BankAccountRequestModel.mapper()
      request_content = self.serialize(request_mapper,  bank_account_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/bankaccounts'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::BankAccountResponseModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the bank account associated with the specified token.
    #
    # @param token [String] The token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BankAccountModel] operation results.
    #
    def get_bank_account_by_token(token, custom_headers:nil)
      response = get_bank_account_by_token_async(token, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the bank account associated with the specified token.
    #
    # @param token [String] The token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_bank_account_by_token_with_http_info(token, custom_headers:nil)
      get_bank_account_by_token_async(token, custom_headers:custom_headers).value!
    end

    #
    # Gets the bank account associated with the specified token.
    #
    # @param token [String] The token.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_bank_account_by_token_async(token, custom_headers:nil)
      fail ArgumentError, 'token is nil' if token.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/bankaccounts/{token}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'token' => token},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 403 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::BankAccountModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the bin information for a specified credit card number.
    #
    # @param card_number [String] The card number.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Bin] operation results.
    #
    def get_bin(card_number, custom_headers:nil)
      response = get_bin_async(card_number, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the bin information for a specified credit card number.
    #
    # @param card_number [String] The card number.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_bin_with_http_info(card_number, custom_headers:nil)
      get_bin_async(card_number, custom_headers:custom_headers).value!
    end

    #
    # Gets the bin information for a specified credit card number.
    #
    # @param card_number [String] The card number.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_bin_async(card_number, custom_headers:nil)
      fail ArgumentError, 'card_number is nil' if card_number.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/bins'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'cardNumber' => card_number},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::Bin.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the checkout.
    #
    # @param checkout_id [Integer] The checkout identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CheckoutResponseModel] operation results.
    #
    def get_checkout(checkout_id, custom_headers:nil)
      response = get_checkout_async(checkout_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the checkout.
    #
    # @param checkout_id [Integer] The checkout identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_checkout_with_http_info(checkout_id, custom_headers:nil)
      get_checkout_async(checkout_id, custom_headers:custom_headers).value!
    end

    #
    # Gets the checkout.
    #
    # @param checkout_id [Integer] The checkout identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_checkout_async(checkout_id, custom_headers:nil)
      fail ArgumentError, 'checkout_id is nil' if checkout_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/checkouts'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'checkoutId' => checkout_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::CheckoutResponseModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Posts the specified model.
    #
    # @param model [CheckoutRequestModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CheckoutResponseModel] operation results.
    #
    def create_checkout(model, custom_headers:nil)
      response = create_checkout_async(model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts the specified model.
    #
    # @param model [CheckoutRequestModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_checkout_with_http_info(model, custom_headers:nil)
      create_checkout_async(model, custom_headers:custom_headers).value!
    end

    #
    # Posts the specified model.
    #
    # @param model [CheckoutRequestModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_checkout_async(model, custom_headers:nil)
      fail ArgumentError, 'model is nil' if model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::CheckoutRequestModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/checkouts'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::CheckoutResponseModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::CheckoutResponseModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all credit cards associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_credit_cards_by_reference_id(reference_id, custom_headers:nil)
      response = get_credit_cards_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all credit cards associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_credit_cards_by_reference_id_with_http_info(reference_id, custom_headers:nil)
      get_credit_cards_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all credit cards associated with the specified reference identifier.
    #
    # @param reference_id [String] The reference identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_credit_cards_by_reference_id_async(reference_id, custom_headers:nil)
      fail ArgumentError, 'reference_id is nil' if reference_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/creditcards'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'referenceId' => reference_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'CreditCardModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CreditCardModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a credit card.
    #
    # @param update_credit_card_model [UpdateCreditCardModel] The update credit
    # card model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_credit_card(update_credit_card_model, custom_headers:nil)
      response = update_credit_card_async(update_credit_card_model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a credit card.
    #
    # @param update_credit_card_model [UpdateCreditCardModel] The update credit
    # card model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_credit_card_with_http_info(update_credit_card_model, custom_headers:nil)
      update_credit_card_async(update_credit_card_model, custom_headers:custom_headers).value!
    end

    #
    # Updates a credit card.
    #
    # @param update_credit_card_model [UpdateCreditCardModel] The update credit
    # card model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_credit_card_async(update_credit_card_model, custom_headers:nil)
      fail ArgumentError, 'update_credit_card_model is nil' if update_credit_card_model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::UpdateCreditCardModel.mapper()
      request_content = self.serialize(request_mapper,  update_credit_card_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/creditcards'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Posts a new credit card.
    #
    # @param credit_card_request [CreditCardRequestModel] The new credit card.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CreditCardResponseModel] operation results.
    #
    def create_credit_card(credit_card_request, custom_headers:nil)
      response = create_credit_card_async(credit_card_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts a new credit card.
    #
    # @param credit_card_request [CreditCardRequestModel] The new credit card.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_credit_card_with_http_info(credit_card_request, custom_headers:nil)
      create_credit_card_async(credit_card_request, custom_headers:custom_headers).value!
    end

    #
    # Posts a new credit card.
    #
    # @param credit_card_request [CreditCardRequestModel] The new credit card.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_credit_card_async(credit_card_request, custom_headers:nil)
      fail ArgumentError, 'credit_card_request is nil' if credit_card_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::CreditCardRequestModel.mapper()
      request_content = self.serialize(request_mapper,  credit_card_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/creditcards'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::CreditCardResponseModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the specified payment by its identifier.
    #
    # @param id [Integer] The payment identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PaymentModel] operation results.
    #
    def get_payment(id, custom_headers:nil)
      response = get_payment_async(id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the specified payment by its identifier.
    #
    # @param id [Integer] The payment identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_payment_with_http_info(id, custom_headers:nil)
      get_payment_async(id, custom_headers:custom_headers).value!
    end

    #
    # Gets the specified payment by its identifier.
    #
    # @param id [Integer] The payment identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_payment_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/payments/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::PaymentModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets payments associated with the specified reference identifier.
    #
    # @param reference_id [String] The client application provided reference ID for
    # the payment.
    # @param min_date [DateTime] The optional lower bound of the range for payment
    # date.
    # @param max_date [DateTime] The optional upper bound of the range for payment
    # date.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_payments_by_reference_id(reference_id, min_date:nil, max_date:nil, custom_headers:nil)
      response = get_payments_by_reference_id_async(reference_id, min_date:min_date, max_date:max_date, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets payments associated with the specified reference identifier.
    #
    # @param reference_id [String] The client application provided reference ID for
    # the payment.
    # @param min_date [DateTime] The optional lower bound of the range for payment
    # date.
    # @param max_date [DateTime] The optional upper bound of the range for payment
    # date.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_payments_by_reference_id_with_http_info(reference_id, min_date:nil, max_date:nil, custom_headers:nil)
      get_payments_by_reference_id_async(reference_id, min_date:min_date, max_date:max_date, custom_headers:custom_headers).value!
    end

    #
    # Gets payments associated with the specified reference identifier.
    #
    # @param reference_id [String] The client application provided reference ID for
    # the payment.
    # @param min_date [DateTime] The optional lower bound of the range for payment
    # date.
    # @param max_date [DateTime] The optional upper bound of the range for payment
    # date.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_payments_by_reference_id_async(reference_id, min_date:nil, max_date:nil, custom_headers:nil)
      fail ArgumentError, 'reference_id is nil' if reference_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/payments'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'referenceId' => reference_id,'minDate' => min_date,'maxDate' => max_date},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'PaymentModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'PaymentModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Posts a new payment.
    #
    # @param payment_request [PaymentRequestModel] The new payment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [PaymentModel] operation results.
    #
    def create_payment(payment_request, custom_headers:nil)
      response = create_payment_async(payment_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts a new payment.
    #
    # @param payment_request [PaymentRequestModel] The new payment.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_payment_with_http_info(payment_request, custom_headers:nil)
      create_payment_async(payment_request, custom_headers:custom_headers).value!
    end

    #
    # Posts a new payment.
    #
    # @param payment_request [PaymentRequestModel] The new payment.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_payment_async(payment_request, custom_headers:nil)
      fail ArgumentError, 'payment_request is nil' if payment_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::PaymentRequestModel.mapper()
      request_content = self.serialize(request_mapper,  payment_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/payments'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 201 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::PaymentModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::PaymentModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the refunds associated with the specified payment.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_refunds(id, custom_headers:nil)
      response = get_refunds_async(id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the refunds associated with the specified payment.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_refunds_with_http_info(id, custom_headers:nil)
      get_refunds_async(id, custom_headers:custom_headers).value!
    end

    #
    # Gets the refunds associated with the specified payment.
    #
    # @param id [Integer] The identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_refunds_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/payments/{id}/refunds'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'RefundResultModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'RefundResultModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Posts a new refund request.
    #
    # @param id [Integer] The identifier of the payment to be refunded.
    # @param refund_request_model [RefundRequestModel] The refund model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [RefundResultModel] operation results.
    #
    def create_refund(id, refund_request_model, custom_headers:nil)
      response = create_refund_async(id, refund_request_model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts a new refund request.
    #
    # @param id [Integer] The identifier of the payment to be refunded.
    # @param refund_request_model [RefundRequestModel] The refund model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_refund_with_http_info(id, refund_request_model, custom_headers:nil)
      create_refund_async(id, refund_request_model, custom_headers:custom_headers).value!
    end

    #
    # Posts a new refund request.
    #
    # @param id [Integer] The identifier of the payment to be refunded.
    # @param refund_request_model [RefundRequestModel] The refund model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_refund_async(id, refund_request_model, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'refund_request_model is nil' if refund_request_model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::RefundRequestModel.mapper()
      request_content = self.serialize(request_mapper,  refund_request_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/payments/{id}/refunds'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::RefundResultModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all payment subscriptions associated with the specified reference id.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_subscriptions_by_reference_id(reference_id, custom_headers:nil)
      response = get_subscriptions_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all payment subscriptions associated with the specified reference id.
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_subscriptions_by_reference_id_with_http_info(reference_id, custom_headers:nil)
      get_subscriptions_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all payment subscriptions associated with the specified reference id.
    #
    # @param reference_id [String] The reference identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_subscriptions_by_reference_id_async(reference_id, custom_headers:nil)
      fail ArgumentError, 'reference_id is nil' if reference_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/subscriptions'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'referenceId' => reference_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'SubscriptionModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'SubscriptionModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates a payment subscription.
    #
    # @param update_subscription_model [UpdateSubscriptionModel] The update
    # subscription model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_subscription(update_subscription_model, custom_headers:nil)
      response = update_subscription_async(update_subscription_model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Updates a payment subscription.
    #
    # @param update_subscription_model [UpdateSubscriptionModel] The update
    # subscription model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_subscription_with_http_info(update_subscription_model, custom_headers:nil)
      update_subscription_async(update_subscription_model, custom_headers:custom_headers).value!
    end

    #
    # Updates a payment subscription.
    #
    # @param update_subscription_model [UpdateSubscriptionModel] The update
    # subscription model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_subscription_async(update_subscription_model, custom_headers:nil)
      fail ArgumentError, 'update_subscription_model is nil' if update_subscription_model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::UpdateSubscriptionModel.mapper()
      request_content = self.serialize(request_mapper,  update_subscription_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/subscriptions'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 204
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Posts a new payment subscription.
    #
    # @param subscription_request [SubscriptionRequestModel] The subscription
    # request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubscriptionResponceModel] operation results.
    #
    def create_subscription(subscription_request, custom_headers:nil)
      response = create_subscription_async(subscription_request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts a new payment subscription.
    #
    # @param subscription_request [SubscriptionRequestModel] The subscription
    # request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_subscription_with_http_info(subscription_request, custom_headers:nil)
      create_subscription_async(subscription_request, custom_headers:custom_headers).value!
    end

    #
    # Posts a new payment subscription.
    #
    # @param subscription_request [SubscriptionRequestModel] The subscription
    # request.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_subscription_async(subscription_request, custom_headers:nil)
      fail ArgumentError, 'subscription_request is nil' if subscription_request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::SubscriptionRequestModel.mapper()
      request_content = self.serialize(request_mapper,  subscription_request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/subscriptions'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 409
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::SubscriptionResponceModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets a single payment subscription with the specified subscription id.
    #
    # @param id [String] The subscription id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SubscriptionModel] operation results.
    #
    def get_subscription(id, custom_headers:nil)
      response = get_subscription_async(id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a single payment subscription with the specified subscription id.
    #
    # @param id [String] The subscription id.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_subscription_with_http_info(id, custom_headers:nil)
      get_subscription_async(id, custom_headers:custom_headers).value!
    end

    #
    # Gets a single payment subscription with the specified subscription id.
    #
    # @param id [String] The subscription id.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_subscription_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/subscriptions/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::SubscriptionModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the wallet by wallet ID
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [WalletModel] operation results.
    #
    def get_wallet(wallet_id, custom_headers:nil)
      response = get_wallet_async(wallet_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the wallet by wallet ID
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_wallet_with_http_info(wallet_id, custom_headers:nil)
      get_wallet_async(wallet_id, custom_headers:custom_headers).value!
    end

    #
    # Gets the wallet by wallet ID
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_wallet_async(wallet_id, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/wallet/{walletId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 404
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::WalletModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Puts the wallet.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param default_payment_token [String] The default payment token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update_wallet(wallet_id, default_payment_token, custom_headers:nil)
      response = update_wallet_async(wallet_id, default_payment_token, custom_headers:custom_headers).value!
      nil
    end

    #
    # Puts the wallet.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param default_payment_token [String] The default payment token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_wallet_with_http_info(wallet_id, default_payment_token, custom_headers:nil)
      update_wallet_async(wallet_id, default_payment_token, custom_headers:custom_headers).value!
    end

    #
    # Puts the wallet.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param default_payment_token [String] The default payment token.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_wallet_async(wallet_id, default_payment_token, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?
      fail ArgumentError, 'default_payment_token is nil' if default_payment_token.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = {
        client_side_validation: true,
        required: true,
        serialized_name: 'defaultPaymentToken',
        type: {
          name: 'String'
        }
      }
      request_content = self.serialize(request_mapper,  default_payment_token)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/wallet/{walletId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Gets the wallet by reference ID
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [WalletModel] operation results.
    #
    def get_wallet_by_reference_id(reference_id, custom_headers:nil)
      response = get_wallet_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the wallet by reference ID
    #
    # @param reference_id [String] The reference identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_wallet_by_reference_id_with_http_info(reference_id, custom_headers:nil)
      get_wallet_by_reference_id_async(reference_id, custom_headers:custom_headers).value!
    end

    #
    # Gets the wallet by reference ID
    #
    # @param reference_id [String] The reference identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_wallet_by_reference_id_async(reference_id, custom_headers:nil)
      fail ArgumentError, 'reference_id is nil' if reference_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/wallet'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'referenceId' => reference_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::WalletModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a new empty wallet
    #
    # @param model [WalletRequestModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def create_wallet(model, custom_headers:nil)
      response = create_wallet_async(model, custom_headers:custom_headers).value!
      nil
    end

    #
    # Creates a new empty wallet
    #
    # @param model [WalletRequestModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_wallet_with_http_info(model, custom_headers:nil)
      create_wallet_async(model, custom_headers:custom_headers).value!
    end

    #
    # Creates a new empty wallet
    #
    # @param model [WalletRequestModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_wallet_async(model, custom_headers:nil)
      fail ArgumentError, 'model is nil' if model.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::WalletRequestModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/wallet'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Adds a new credit card to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletCreditCardRequestModel] The request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [WalletModel] operation results.
    #
    def add_wallet_credit_card(wallet_id, request, custom_headers:nil)
      response = add_wallet_credit_card_async(wallet_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a new credit card to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletCreditCardRequestModel] The request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def add_wallet_credit_card_with_http_info(wallet_id, request, custom_headers:nil)
      add_wallet_credit_card_async(wallet_id, request, custom_headers:custom_headers).value!
    end

    #
    # Adds a new credit card to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletCreditCardRequestModel] The request.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_wallet_credit_card_async(wallet_id, request, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::WalletCreditCardRequestModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/wallet/{walletId}/CreditCard'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::WalletModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Adds a new bank account to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletBankAccountRequestModel] The request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [WalletModel] operation results.
    #
    def add_wallet_bank_account(wallet_id, request, custom_headers:nil)
      response = add_wallet_bank_account_async(wallet_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Adds a new bank account to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletBankAccountRequestModel] The request.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def add_wallet_bank_account_with_http_info(wallet_id, request, custom_headers:nil)
      add_wallet_bank_account_async(wallet_id, request, custom_headers:custom_headers).value!
    end

    #
    # Adds a new bank account to the wallet
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param request [WalletBankAccountRequestModel] The request.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def add_wallet_bank_account_async(wallet_id, request, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Softheon.Wallet.Api.Client::Models::WalletBankAccountRequestModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/wallet/{walletId}/BankAccount'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Softheon.Wallet.Api.Client::Models::WalletModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Deletes the wallet credit card.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_credit_card_id [Integer] The wallet credit card identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def remove_wallet_credit_card(wallet_id, wallet_credit_card_id, custom_headers:nil)
      response = remove_wallet_credit_card_async(wallet_id, wallet_credit_card_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes the wallet credit card.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_credit_card_id [Integer] The wallet credit card identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def remove_wallet_credit_card_with_http_info(wallet_id, wallet_credit_card_id, custom_headers:nil)
      remove_wallet_credit_card_async(wallet_id, wallet_credit_card_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes the wallet credit card.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_credit_card_id [Integer] The wallet credit card identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def remove_wallet_credit_card_async(wallet_id, wallet_credit_card_id, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?
      fail ArgumentError, 'wallet_credit_card_id is nil' if wallet_credit_card_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/wallet/{walletId}/CreditCard/{walletCreditCardId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id,'walletCreditCardId' => wallet_credit_card_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Deletes the wallet bank account.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_bank_acct_id [Integer] The wallet bank acct identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def remove_wallet_bank_account(wallet_id, wallet_bank_acct_id, custom_headers:nil)
      response = remove_wallet_bank_account_async(wallet_id, wallet_bank_acct_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes the wallet bank account.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_bank_acct_id [Integer] The wallet bank acct identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def remove_wallet_bank_account_with_http_info(wallet_id, wallet_bank_acct_id, custom_headers:nil)
      remove_wallet_bank_account_async(wallet_id, wallet_bank_acct_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes the wallet bank account.
    #
    # @param wallet_id [Integer] The wallet identifier.
    # @param wallet_bank_acct_id [Integer] The wallet bank acct identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def remove_wallet_bank_account_async(wallet_id, wallet_bank_acct_id, custom_headers:nil)
      fail ArgumentError, 'wallet_id is nil' if wallet_id.nil?
      fail ArgumentError, 'wallet_bank_acct_id is nil' if wallet_bank_acct_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/wallet/{walletId}/BankAccount/{walletBankAcctId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'walletId' => wallet_id,'walletBankAcctId' => wallet_bank_acct_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'Softheon.Wallet.Api.Client'
        add_user_agent_information(sdk_information)
    end
  end
end
