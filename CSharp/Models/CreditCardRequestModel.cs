// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The request model sent by the client for adding new credit cards to the
    /// payment platform.
    /// </summary>
    public partial class CreditCardRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the CreditCardRequestModel class.
        /// </summary>
        public CreditCardRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreditCardRequestModel class.
        /// </summary>
        /// <param name="cardNumber">The number on the credit card.</param>
        /// <param name="securityCode">The security, or CVV code, on the
        /// card.</param>
        /// <param name="expirationMonth">The expiration month of the credit
        /// card.</param>
        /// <param name="expirationYear">The expiration year of the credit
        /// card.</param>
        /// <param name="cardHolderName">The name of the cardholder, as it
        /// appears on the front of the credit card.</param>
        /// <param name="billingAddress">The billing address for the credit
        /// card holder..</param>
        /// <param name="email">A valid email address for the card
        /// holder.</param>
        /// <param name="referenceId">The client application provided reference
        /// ID for the credit card.</param>
        /// <param name="redirectUrl">The url that the client will be
        /// redirected to after the credit card has been created.</param>
        public CreditCardRequestModel(string cardNumber, string securityCode, int expirationMonth, int expirationYear, string cardHolderName, Address billingAddress, string email, string referenceId = default(string), string redirectUrl = default(string))
        {
            CardNumber = cardNumber;
            SecurityCode = securityCode;
            ExpirationMonth = expirationMonth;
            ExpirationYear = expirationYear;
            CardHolderName = cardHolderName;
            BillingAddress = billingAddress;
            Email = email;
            ReferenceId = referenceId;
            RedirectUrl = redirectUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number on the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "cardNumber")]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or sets the security, or CVV code, on the card.
        /// </summary>
        [JsonProperty(PropertyName = "securityCode")]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Gets or sets the expiration month of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "expirationMonth")]
        public int ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or sets the expiration year of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "expirationYear")]
        public int ExpirationYear { get; set; }

        /// <summary>
        /// Gets or sets the name of the cardholder, as it appears on the front
        /// of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "cardHolderName")]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or sets the billing address for the credit card holder..
        /// </summary>
        [JsonProperty(PropertyName = "billingAddress")]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or sets a valid email address for the card holder.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the client application provided reference ID for the
        /// credit card.
        /// </summary>
        [JsonProperty(PropertyName = "referenceId")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or sets the url that the client will be redirected to after
        /// the credit card has been created.
        /// </summary>
        [JsonProperty(PropertyName = "redirectUrl")]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CardNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CardNumber");
            }
            if (SecurityCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecurityCode");
            }
            if (CardHolderName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CardHolderName");
            }
            if (BillingAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BillingAddress");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (SecurityCode != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(SecurityCode, "\\d{3,4}"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "SecurityCode", "\\d{3,4}");
                }
            }
            if (ExpirationMonth > 12)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ExpirationMonth", 12);
            }
            if (ExpirationMonth < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ExpirationMonth", 1);
            }
            if (ExpirationYear > 2038)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ExpirationYear", 2038);
            }
            if (ExpirationYear < 2018)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ExpirationYear", 2018);
            }
            if (BillingAddress != null)
            {
                BillingAddress.Validate();
            }
        }
    }
}
