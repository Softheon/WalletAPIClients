// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines a a funding source for a payment request.
    /// </summary>
    public partial class PaymentMethodModel
    {
        /// <summary>
        /// Initializes a new instance of the PaymentMethodModel class.
        /// </summary>
        public PaymentMethodModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PaymentMethodModel class.
        /// </summary>
        /// <param name="paymentToken">The credit card or bank account token
        /// that will be used for payment.</param>
        /// <param name="type">The type of funding source that will be used for
        /// the payment. Possible values include: 'Unknown', 'Credit Card',
        /// 'ACH'</param>
        public PaymentMethodModel(string paymentToken, string type)
        {
            PaymentToken = paymentToken;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the credit card or bank account token that will be
        /// used for payment.
        /// </summary>
        [JsonProperty(PropertyName = "paymentToken")]
        public string PaymentToken { get; set; }

        /// <summary>
        /// Gets or sets the type of funding source that will be used for the
        /// payment. Possible values include: 'Unknown', 'Credit Card', 'ACH'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PaymentToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentToken");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
