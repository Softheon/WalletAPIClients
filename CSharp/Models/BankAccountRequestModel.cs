// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The request model sent by the client for adding new bank accounts to
    /// the payment platform.
    /// </summary>
    public partial class BankAccountRequestModel
    {
        /// <summary>
        /// Initializes a new instance of the BankAccountRequestModel class.
        /// </summary>
        public BankAccountRequestModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BankAccountRequestModel class.
        /// </summary>
        /// <param name="accountNumber">The bank account number.</param>
        /// <param name="routingNumber">The routing number of the bank where
        /// the bank account was opened.</param>
        /// <param name="accountHolderName">The name of the individual or
        /// entity that is autorized to make transactions for the bank
        /// account.</param>
        /// <param name="accountHolderAddress">The mailing address for the
        /// account holder.</param>
        /// <param name="type">The bank account type. Possible values include:
        /// 'Unknown', 'Checking', 'Savings'</param>
        /// <param name="email">The email address for the account
        /// holder.</param>
        /// <param name="referenceId">The client application provided reference
        /// ID for the bank account.</param>
        /// <param name="nickname">The aribtrary nickname of the account, used
        /// as a way to identify the account.</param>
        /// <param name="redirectUrl">The url that the client will be
        /// redirected to after the bank account has been created.</param>
        public BankAccountRequestModel(string accountNumber, string routingNumber, string accountHolderName, Address accountHolderAddress, string type, string email, string referenceId = default(string), string nickname = default(string), string redirectUrl = default(string))
        {
            AccountNumber = accountNumber;
            RoutingNumber = routingNumber;
            AccountHolderName = accountHolderName;
            AccountHolderAddress = accountHolderAddress;
            Type = type;
            ReferenceId = referenceId;
            Nickname = nickname;
            Email = email;
            RedirectUrl = redirectUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the bank account number.
        /// </summary>
        [JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the routing number of the bank where the bank account
        /// was opened.
        /// </summary>
        [JsonProperty(PropertyName = "routingNumber")]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or sets the name of the individual or entity that is autorized
        /// to make transactions for the bank account.
        /// </summary>
        [JsonProperty(PropertyName = "accountHolderName")]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// Gets or sets the mailing address for the account holder.
        /// </summary>
        [JsonProperty(PropertyName = "accountHolderAddress")]
        public Address AccountHolderAddress { get; set; }

        /// <summary>
        /// Gets or sets the bank account type. Possible values include:
        /// 'Unknown', 'Checking', 'Savings'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the client application provided reference ID for the
        /// bank account.
        /// </summary>
        [JsonProperty(PropertyName = "referenceId")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or sets the aribtrary nickname of the account, used as a way
        /// to identify the account.
        /// </summary>
        [JsonProperty(PropertyName = "nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or sets the email address for the account holder.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the url that the client will be redirected to after
        /// the bank account has been created.
        /// </summary>
        [JsonProperty(PropertyName = "redirectUrl")]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AccountNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountNumber");
            }
            if (RoutingNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoutingNumber");
            }
            if (AccountHolderName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountHolderName");
            }
            if (AccountHolderAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountHolderAddress");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (AccountNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AccountNumber, "\\d{4,17}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AccountNumber", "\\d{4,17}$");
                }
            }
            if (RoutingNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(RoutingNumber, "\\d{9,9}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "RoutingNumber", "\\d{9,9}$");
                }
            }
            if (AccountHolderAddress != null)
            {
                AccountHolderAddress.Validate();
            }
        }
    }
}
