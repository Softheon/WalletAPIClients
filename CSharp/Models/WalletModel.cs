// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Wallet Model
    /// </summary>
    public partial class WalletModel
    {
        /// <summary>
        /// Initializes a new instance of the WalletModel class.
        /// </summary>
        public WalletModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WalletModel class.
        /// </summary>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="defaultToken">Gets or sets the default token.</param>
        /// <param name="creditCards">Gets or sets the credit cards.</param>
        /// <param name="bankAccounts">Gets or sets the bank accounts.</param>
        public WalletModel(int id, string defaultToken = default(string), IList<CreditCardModel> creditCards = default(IList<CreditCardModel>), IList<BankAccountModel> bankAccounts = default(IList<BankAccountModel>))
        {
            Id = id;
            DefaultToken = defaultToken;
            CreditCards = creditCards;
            BankAccounts = bankAccounts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the default token.
        /// </summary>
        [JsonProperty(PropertyName = "defaultToken")]
        public string DefaultToken { get; set; }

        /// <summary>
        /// Gets or sets the credit cards.
        /// </summary>
        [JsonProperty(PropertyName = "creditCards")]
        public IList<CreditCardModel> CreditCards { get; set; }

        /// <summary>
        /// Gets or sets the bank accounts.
        /// </summary>
        [JsonProperty(PropertyName = "bankAccounts")]
        public IList<BankAccountModel> BankAccounts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CreditCards != null)
            {
                foreach (var element in CreditCards)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BankAccounts != null)
            {
                foreach (var element1 in BankAccounts)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
