// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The request model sent by the client for updating credit cards in the
    /// payment platform.
    /// </summary>
    public partial class UpdateCreditCardModel
    {
        /// <summary>
        /// Initializes a new instance of the UpdateCreditCardModel class.
        /// </summary>
        public UpdateCreditCardModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateCreditCardModel class.
        /// </summary>
        /// <param name="token">The payment token for the credit card.</param>
        /// <param name="expirationMonth">The expiration month of the credit
        /// card.</param>
        /// <param name="expirationYear">The expiration year of the credit
        /// card.</param>
        /// <param name="cardHolderName">The name of the cardholder, as it
        /// appears on the front of the credit card.</param>
        /// <param name="billingAddress">The billing address for the credit
        /// card holder..</param>
        /// <param name="email">A valid email address for the card
        /// holder.</param>
        public UpdateCreditCardModel(string token, int expirationMonth, int expirationYear, string cardHolderName, Address billingAddress, string email)
        {
            Token = token;
            ExpirationMonth = expirationMonth;
            ExpirationYear = expirationYear;
            CardHolderName = cardHolderName;
            BillingAddress = billingAddress;
            Email = email;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the payment token for the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets the expiration month of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "expirationMonth")]
        public int ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or sets the expiration year of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "expirationYear")]
        public int ExpirationYear { get; set; }

        /// <summary>
        /// Gets or sets the name of the cardholder, as it appears on the front
        /// of the credit card.
        /// </summary>
        [JsonProperty(PropertyName = "cardHolderName")]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or sets the billing address for the credit card holder..
        /// </summary>
        [JsonProperty(PropertyName = "billingAddress")]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or sets a valid email address for the card holder.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Token == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Token");
            }
            if (CardHolderName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CardHolderName");
            }
            if (BillingAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BillingAddress");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (ExpirationMonth > 12)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ExpirationMonth", 12);
            }
            if (ExpirationMonth < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ExpirationMonth", 1);
            }
            if (ExpirationYear > 2038)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "ExpirationYear", 2038);
            }
            if (ExpirationYear < 2018)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ExpirationYear", 2018);
            }
            if (BillingAddress != null)
            {
                BillingAddress.Validate();
            }
        }
    }
}
