// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The model sent to the client in response to a GET request for a bank
    /// account.
    /// </summary>
    public partial class BankAccountModel
    {
        /// <summary>
        /// Initializes a new instance of the BankAccountModel class.
        /// </summary>
        public BankAccountModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BankAccountModel class.
        /// </summary>
        /// <param name="routingNumber">The routing number of the bank where
        /// the bank account was opened.</param>
        /// <param name="type">The bank account type. Possible values include:
        /// 'Unknown', 'Checking', 'Savings'</param>
        /// <param name="state">The state that the bank acocunt is in. Possible
        /// values include: 'Unknown', 'New', 'Pending', 'Authorized',
        /// 'Disabled'</param>
        /// <param name="accountHolderName">The name of the individual or
        /// entity that is autorized to make transactions for the bank
        /// account.</param>
        /// <param name="accountHolderAddress">The mailing address for the
        /// account holder.</param>
        /// <param name="email">The email address for the account
        /// holder.</param>
        /// <param name="id">Gets or sets the identifier.</param>
        /// <param name="token">The payment token for the bank account.</param>
        /// <param name="accountNumber">The bank account number.</param>
        /// <param name="nickname">The aribtrary nickname of the account, used
        /// as a way to identify the account.</param>
        /// <param name="referenceId">The client application provided reference
        /// ID for the bank account.</param>
        /// <param name="createdTime">The timestamp indicating when the bank
        /// account was created.</param>
        /// <param name="modifiedTime">The timestamp indicating the last time
        /// that the details of the bank account were modified.</param>
        public BankAccountModel(string routingNumber, string type, string state, string accountHolderName, Address accountHolderAddress, string email, int? id = default(int?), string token = default(string), string accountNumber = default(string), string nickname = default(string), string referenceId = default(string), System.DateTimeOffset? createdTime = default(System.DateTimeOffset?), System.DateTimeOffset? modifiedTime = default(System.DateTimeOffset?))
        {
            Id = id;
            Token = token;
            AccountNumber = accountNumber;
            RoutingNumber = routingNumber;
            Type = type;
            State = state;
            Nickname = nickname;
            AccountHolderName = accountHolderName;
            AccountHolderAddress = accountHolderAddress;
            Email = email;
            ReferenceId = referenceId;
            CreatedTime = createdTime;
            ModifiedTime = modifiedTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or sets the payment token for the bank account.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets the bank account number.
        /// </summary>
        [JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the routing number of the bank where the bank account
        /// was opened.
        /// </summary>
        [JsonProperty(PropertyName = "routingNumber")]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or sets the bank account type. Possible values include:
        /// 'Unknown', 'Checking', 'Savings'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the state that the bank acocunt is in. Possible values
        /// include: 'Unknown', 'New', 'Pending', 'Authorized', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the aribtrary nickname of the account, used as a way
        /// to identify the account.
        /// </summary>
        [JsonProperty(PropertyName = "nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or sets the name of the individual or entity that is autorized
        /// to make transactions for the bank account.
        /// </summary>
        [JsonProperty(PropertyName = "accountHolderName")]
        public string AccountHolderName { get; set; }

        /// <summary>
        /// Gets or sets the mailing address for the account holder.
        /// </summary>
        [JsonProperty(PropertyName = "accountHolderAddress")]
        public Address AccountHolderAddress { get; set; }

        /// <summary>
        /// Gets or sets the email address for the account holder.
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the client application provided reference ID for the
        /// bank account.
        /// </summary>
        [JsonProperty(PropertyName = "referenceId")]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or sets the timestamp indicating when the bank account was
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTimeOffset? CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the timestamp indicating the last time that the
        /// details of the bank account were modified.
        /// </summary>
        [JsonProperty(PropertyName = "modifiedTime")]
        public System.DateTimeOffset? ModifiedTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RoutingNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoutingNumber");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
            if (AccountHolderName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountHolderName");
            }
            if (AccountHolderAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountHolderAddress");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (AccountNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AccountNumber, "\\d{4,17}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AccountNumber", "\\d{4,17}$");
                }
            }
            if (RoutingNumber != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(RoutingNumber, "\\d{9,9}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "RoutingNumber", "\\d{9,9}$");
                }
            }
            if (AccountHolderAddress != null)
            {
                AccountHolderAddress.Validate();
            }
        }
    }
}
