// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Softheon.Wallet.Api.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SoftheonWalletAPI.
    /// </summary>
    public static partial class SoftheonWalletAPIExtensions
    {
            /// <summary>
            /// Gets the bank account associated with the specified token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// The token.
            /// </param>
            public static BankAccountModel GetBankAccountByToken(this ISoftheonWalletAPI operations, string token)
            {
                return operations.GetBankAccountByTokenAsync(token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the bank account associated with the specified token.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// The token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BankAccountModel> GetBankAccountByTokenAsync(this ISoftheonWalletAPI operations, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBankAccountByTokenWithHttpMessagesAsync(token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all bank accounts associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            public static IList<BankAccountModel> GetBankAccountsByReferenceId(this ISoftheonWalletAPI operations, string referenceId)
            {
                return operations.GetBankAccountsByReferenceIdAsync(referenceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all bank accounts associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BankAccountModel>> GetBankAccountsByReferenceIdAsync(this ISoftheonWalletAPI operations, string referenceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBankAccountsByReferenceIdWithHttpMessagesAsync(referenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateBankAccountModel'>
            /// The update bank account model.
            /// </param>
            public static void UpdateBankAccount(this ISoftheonWalletAPI operations, UpdateBankAccountModel updateBankAccountModel)
            {
                operations.UpdateBankAccountAsync(updateBankAccountModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateBankAccountModel'>
            /// The update bank account model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateBankAccountAsync(this ISoftheonWalletAPI operations, UpdateBankAccountModel updateBankAccountModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateBankAccountWithHttpMessagesAsync(updateBankAccountModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts a new bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankAccountRequest'>
            /// The bank account.
            /// </param>
            public static BankAccountResponseModel CreateBankAccount(this ISoftheonWalletAPI operations, BankAccountRequestModel bankAccountRequest)
            {
                return operations.CreateBankAccountAsync(bankAccountRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts a new bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bankAccountRequest'>
            /// The bank account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BankAccountResponseModel> CreateBankAccountAsync(this ISoftheonWalletAPI operations, BankAccountRequestModel bankAccountRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBankAccountWithHttpMessagesAsync(bankAccountRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the bin information for a specified credit card number.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='binRequest'>
            /// The bin request.
            /// </param>
            public static Bin GetBin(this ISoftheonWalletAPI operations, BinRequestModel binRequest)
            {
                return operations.GetBinAsync(binRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the bin information for a specified credit card number.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='binRequest'>
            /// The bin request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Bin> GetBinAsync(this ISoftheonWalletAPI operations, BinRequestModel binRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBinWithHttpMessagesAsync(binRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the checkout.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkoutId'>
            /// The checkout identifier.
            /// </param>
            public static CheckoutResponseModel GetCheckout(this ISoftheonWalletAPI operations, int checkoutId)
            {
                return operations.GetCheckoutAsync(checkoutId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the checkout.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='checkoutId'>
            /// The checkout identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckoutResponseModel> GetCheckoutAsync(this ISoftheonWalletAPI operations, int checkoutId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCheckoutWithHttpMessagesAsync(checkoutId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts the specified model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static CheckoutResponseModel CreateCheckout(this ISoftheonWalletAPI operations, CheckoutRequestModel model)
            {
                return operations.CreateCheckoutAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts the specified model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckoutResponseModel> CreateCheckoutAsync(this ISoftheonWalletAPI operations, CheckoutRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCheckoutWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all credit cards associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            public static IList<CreditCardModel> GetCreditCardsByReferenceId(this ISoftheonWalletAPI operations, string referenceId)
            {
                return operations.GetCreditCardsByReferenceIdAsync(referenceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all credit cards associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CreditCardModel>> GetCreditCardsByReferenceIdAsync(this ISoftheonWalletAPI operations, string referenceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCreditCardsByReferenceIdWithHttpMessagesAsync(referenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateCreditCardModel'>
            /// The update credit card model.
            /// </param>
            public static void UpdateCreditCard(this ISoftheonWalletAPI operations, UpdateCreditCardModel updateCreditCardModel)
            {
                operations.UpdateCreditCardAsync(updateCreditCardModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateCreditCardModel'>
            /// The update credit card model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateCreditCardAsync(this ISoftheonWalletAPI operations, UpdateCreditCardModel updateCreditCardModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateCreditCardWithHttpMessagesAsync(updateCreditCardModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts a new credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditCardRequest'>
            /// The new credit card.
            /// </param>
            public static CreditCardResponseModel CreateCreditCard(this ISoftheonWalletAPI operations, CreditCardRequestModel creditCardRequest)
            {
                return operations.CreateCreditCardAsync(creditCardRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts a new credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditCardRequest'>
            /// The new credit card.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreditCardResponseModel> CreateCreditCardAsync(this ISoftheonWalletAPI operations, CreditCardRequestModel creditCardRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCreditCardWithHttpMessagesAsync(creditCardRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified payment by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The payment identifier.
            /// </param>
            public static PaymentModel GetPayment(this ISoftheonWalletAPI operations, int id)
            {
                return operations.GetPaymentAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified payment by its identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The payment identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaymentModel> GetPaymentAsync(this ISoftheonWalletAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets payments associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// Gets or sets the reference identifier.
            /// </param>
            /// <param name='minDate'>
            /// Gets or sets the minimum date.
            /// </param>
            /// <param name='maxDate'>
            /// Gets or sets the maximum date.
            /// </param>
            public static IList<PaymentModel> GetPaymentsByReferenceId(this ISoftheonWalletAPI operations, string referenceId = default(string), System.DateTimeOffset? minDate = default(System.DateTimeOffset?), System.DateTimeOffset? maxDate = default(System.DateTimeOffset?))
            {
                return operations.GetPaymentsByReferenceIdAsync(referenceId, minDate, maxDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets payments associated with the specified reference identifier.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// Gets or sets the reference identifier.
            /// </param>
            /// <param name='minDate'>
            /// Gets or sets the minimum date.
            /// </param>
            /// <param name='maxDate'>
            /// Gets or sets the maximum date.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PaymentModel>> GetPaymentsByReferenceIdAsync(this ISoftheonWalletAPI operations, string referenceId = default(string), System.DateTimeOffset? minDate = default(System.DateTimeOffset?), System.DateTimeOffset? maxDate = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentsByReferenceIdWithHttpMessagesAsync(referenceId, minDate, maxDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts a new payment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentRequest'>
            /// The new payment.
            /// </param>
            public static PaymentModel CreatePayment(this ISoftheonWalletAPI operations, PaymentRequestModel paymentRequest)
            {
                return operations.CreatePaymentAsync(paymentRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts a new payment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentRequest'>
            /// The new payment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaymentModel> CreatePaymentAsync(this ISoftheonWalletAPI operations, PaymentRequestModel paymentRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePaymentWithHttpMessagesAsync(paymentRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the refunds associated with the specified payment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            public static IList<RefundResultModel> GetRefunds(this ISoftheonWalletAPI operations, int id)
            {
                return operations.GetRefundsAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the refunds associated with the specified payment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RefundResultModel>> GetRefundsAsync(this ISoftheonWalletAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRefundsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Posts a new refund request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the payment to be refunded.
            /// </param>
            /// <param name='refundRequestModel'>
            /// The refund model.
            /// </param>
            public static RefundResultModel CreateRefund(this ISoftheonWalletAPI operations, int id, RefundRequestModel refundRequestModel)
            {
                return operations.CreateRefundAsync(id, refundRequestModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts a new refund request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the payment to be refunded.
            /// </param>
            /// <param name='refundRequestModel'>
            /// The refund model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RefundResultModel> CreateRefundAsync(this ISoftheonWalletAPI operations, int id, RefundRequestModel refundRequestModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRefundWithHttpMessagesAsync(id, refundRequestModel, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a single payment subscription with the specified subscription id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The subscription id.
            /// </param>
            public static SubscriptionModel GetSubscription(this ISoftheonWalletAPI operations, string id)
            {
                return operations.GetSubscriptionAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a single payment subscription with the specified subscription id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The subscription id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionModel> GetSubscriptionAsync(this ISoftheonWalletAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all payment subscriptions associated with the specified reference id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            public static IList<SubscriptionModel> GetSubscriptionsByReferenceId(this ISoftheonWalletAPI operations, string referenceId)
            {
                return operations.GetSubscriptionsByReferenceIdAsync(referenceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all payment subscriptions associated with the specified reference id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SubscriptionModel>> GetSubscriptionsByReferenceIdAsync(this ISoftheonWalletAPI operations, string referenceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsByReferenceIdWithHttpMessagesAsync(referenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a payment subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateSubscriptionModel'>
            /// The update subscription model.
            /// </param>
            public static void UpdateSubscription(this ISoftheonWalletAPI operations, UpdateSubscriptionModel updateSubscriptionModel)
            {
                operations.UpdateSubscriptionAsync(updateSubscriptionModel).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a payment subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateSubscriptionModel'>
            /// The update subscription model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSubscriptionAsync(this ISoftheonWalletAPI operations, UpdateSubscriptionModel updateSubscriptionModel, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSubscriptionWithHttpMessagesAsync(updateSubscriptionModel, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Posts a new payment subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionRequest'>
            /// The subscription request.
            /// </param>
            public static SubscriptionResponseModel CreateSubscription(this ISoftheonWalletAPI operations, SubscriptionRequestModel subscriptionRequest)
            {
                return operations.CreateSubscriptionAsync(subscriptionRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Posts a new payment subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionRequest'>
            /// The subscription request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionResponseModel> CreateSubscriptionAsync(this ISoftheonWalletAPI operations, SubscriptionRequestModel subscriptionRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubscriptionWithHttpMessagesAsync(subscriptionRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the wallet by wallet ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            public static WalletModel GetWallet(this ISoftheonWalletAPI operations, int walletId)
            {
                return operations.GetWalletAsync(walletId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the wallet by wallet ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletModel> GetWalletAsync(this ISoftheonWalletAPI operations, int walletId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWalletWithHttpMessagesAsync(walletId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Puts the wallet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='defaultPaymentToken'>
            /// The default payment token.
            /// </param>
            public static void UpdateWallet(this ISoftheonWalletAPI operations, int walletId, string defaultPaymentToken)
            {
                operations.UpdateWalletAsync(walletId, defaultPaymentToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Puts the wallet.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='defaultPaymentToken'>
            /// The default payment token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateWalletAsync(this ISoftheonWalletAPI operations, int walletId, string defaultPaymentToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWalletWithHttpMessagesAsync(walletId, defaultPaymentToken, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the wallet by reference ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            public static WalletModel GetWalletByReferenceId(this ISoftheonWalletAPI operations, string referenceId)
            {
                return operations.GetWalletByReferenceIdAsync(referenceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the wallet by reference ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceId'>
            /// The reference identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletModel> GetWalletByReferenceIdAsync(this ISoftheonWalletAPI operations, string referenceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWalletByReferenceIdWithHttpMessagesAsync(referenceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new empty wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            public static int? CreateWallet(this ISoftheonWalletAPI operations, WalletRequestModel model)
            {
                return operations.CreateWalletAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new empty wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// The model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> CreateWalletAsync(this ISoftheonWalletAPI operations, WalletRequestModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWalletWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new credit card to the wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='request'>
            /// The request.
            /// </param>
            public static WalletModel AddWalletCreditCard(this ISoftheonWalletAPI operations, int walletId, WalletCreditCardRequestModel request)
            {
                return operations.AddWalletCreditCardAsync(walletId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new credit card to the wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='request'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletModel> AddWalletCreditCardAsync(this ISoftheonWalletAPI operations, int walletId, WalletCreditCardRequestModel request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWalletCreditCardWithHttpMessagesAsync(walletId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new bank account to the wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='request'>
            /// The request.
            /// </param>
            public static WalletModel AddWalletBankAccount(this ISoftheonWalletAPI operations, int walletId, WalletBankAccountRequestModel request)
            {
                return operations.AddWalletBankAccountAsync(walletId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new bank account to the wallet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='request'>
            /// The request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WalletModel> AddWalletBankAccountAsync(this ISoftheonWalletAPI operations, int walletId, WalletBankAccountRequestModel request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWalletBankAccountWithHttpMessagesAsync(walletId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the wallet bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='walletBankAcctId'>
            /// The wallet bank acct identifier.
            /// </param>
            public static void RemoveWalletBankAccount(this ISoftheonWalletAPI operations, int walletId, int walletBankAcctId)
            {
                operations.RemoveWalletBankAccountAsync(walletId, walletBankAcctId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the wallet bank account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='walletBankAcctId'>
            /// The wallet bank acct identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveWalletBankAccountAsync(this ISoftheonWalletAPI operations, int walletId, int walletBankAcctId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWalletBankAccountWithHttpMessagesAsync(walletId, walletBankAcctId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes the wallet credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='walletCreditCardId'>
            /// The wallet credit card identifier.
            /// </param>
            public static void RemoveWalletCreditCard(this ISoftheonWalletAPI operations, int walletId, int walletCreditCardId)
            {
                operations.RemoveWalletCreditCardAsync(walletId, walletCreditCardId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the wallet credit card.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletId'>
            /// The wallet identifier.
            /// </param>
            /// <param name='walletCreditCardId'>
            /// The wallet credit card identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveWalletCreditCardAsync(this ISoftheonWalletAPI operations, int walletId, int walletCreditCardId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWalletCreditCardWithHttpMessagesAsync(walletId, walletCreditCardId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
