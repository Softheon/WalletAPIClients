package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
)

        // AmountType1Enum enumerates the values for amount type 1 enum.
    type AmountType1Enum string

    const (
                // Dynamic ...
        Dynamic AmountType1Enum = "Dynamic"
                // Fixed ...
        Fixed AmountType1Enum = "Fixed"
            )
    // PossibleAmountType1EnumValues returns an array of possible values for the AmountType1Enum const type.
    func PossibleAmountType1EnumValues() []AmountType1Enum {
        return []AmountType1Enum{Dynamic,Fixed}
    }

        // AmountType2Enum enumerates the values for amount type 2 enum.
    type AmountType2Enum string

    const (
                // AmountType2EnumDynamic ...
        AmountType2EnumDynamic AmountType2Enum = "Dynamic"
                // AmountType2EnumFixed ...
        AmountType2EnumFixed AmountType2Enum = "Fixed"
            )
    // PossibleAmountType2EnumValues returns an array of possible values for the AmountType2Enum const type.
    func PossibleAmountType2EnumValues() []AmountType2Enum {
        return []AmountType2Enum{AmountType2EnumDynamic,AmountType2EnumFixed}
    }

        // AmountTypeEnum enumerates the values for amount type enum.
    type AmountTypeEnum string

    const (
                // AmountTypeEnumDynamic ...
        AmountTypeEnumDynamic AmountTypeEnum = "Dynamic"
                // AmountTypeEnumFixed ...
        AmountTypeEnumFixed AmountTypeEnum = "Fixed"
            )
    // PossibleAmountTypeEnumValues returns an array of possible values for the AmountTypeEnum const type.
    func PossibleAmountTypeEnumValues() []AmountTypeEnum {
        return []AmountTypeEnum{AmountTypeEnumDynamic,AmountTypeEnumFixed}
    }

        // BankAccountStateEnum enumerates the values for bank account state enum.
    type BankAccountStateEnum string

    const (
                // BankAccountStateEnumAuthorized ...
        BankAccountStateEnumAuthorized BankAccountStateEnum = "Authorized"
                // BankAccountStateEnumDisabled ...
        BankAccountStateEnumDisabled BankAccountStateEnum = "Disabled"
                // BankAccountStateEnumNew ...
        BankAccountStateEnumNew BankAccountStateEnum = "New"
                // BankAccountStateEnumPending ...
        BankAccountStateEnumPending BankAccountStateEnum = "Pending"
                // BankAccountStateEnumUnknown ...
        BankAccountStateEnumUnknown BankAccountStateEnum = "Unknown"
            )
    // PossibleBankAccountStateEnumValues returns an array of possible values for the BankAccountStateEnum const type.
    func PossibleBankAccountStateEnumValues() []BankAccountStateEnum {
        return []BankAccountStateEnum{BankAccountStateEnumAuthorized,BankAccountStateEnumDisabled,BankAccountStateEnumNew,BankAccountStateEnumPending,BankAccountStateEnumUnknown}
    }

        // BrandEnum enumerates the values for brand enum.
    type BrandEnum string

    const (
                // Amex ...
        Amex BrandEnum = "Amex"
                // Discover ...
        Discover BrandEnum = "Discover"
                // MasterCard ...
        MasterCard BrandEnum = "MasterCard"
                // Unknown ...
        Unknown BrandEnum = "Unknown"
                // Visa ...
        Visa BrandEnum = "Visa"
            )
    // PossibleBrandEnumValues returns an array of possible values for the BrandEnum const type.
    func PossibleBrandEnumValues() []BrandEnum {
        return []BrandEnum{Amex,Discover,MasterCard,Unknown,Visa}
    }

        // CardState1Enum enumerates the values for card state 1 enum.
    type CardState1Enum string

    const (
                // CardState1EnumAuthorized ...
        CardState1EnumAuthorized CardState1Enum = "Authorized"
                // CardState1EnumDeleted ...
        CardState1EnumDeleted CardState1Enum = "Deleted"
                // CardState1EnumExpired ...
        CardState1EnumExpired CardState1Enum = "Expired"
                // CardState1EnumInvalid ...
        CardState1EnumInvalid CardState1Enum = "Invalid"
                // CardState1EnumNew ...
        CardState1EnumNew CardState1Enum = "New"
                // CardState1EnumUnknown ...
        CardState1EnumUnknown CardState1Enum = "Unknown"
            )
    // PossibleCardState1EnumValues returns an array of possible values for the CardState1Enum const type.
    func PossibleCardState1EnumValues() []CardState1Enum {
        return []CardState1Enum{CardState1EnumAuthorized,CardState1EnumDeleted,CardState1EnumExpired,CardState1EnumInvalid,CardState1EnumNew,CardState1EnumUnknown}
    }

        // CardStateEnum enumerates the values for card state enum.
    type CardStateEnum string

    const (
                // CardStateEnumAuthorized ...
        CardStateEnumAuthorized CardStateEnum = "Authorized"
                // CardStateEnumDeleted ...
        CardStateEnumDeleted CardStateEnum = "Deleted"
                // CardStateEnumExpired ...
        CardStateEnumExpired CardStateEnum = "Expired"
                // CardStateEnumInvalid ...
        CardStateEnumInvalid CardStateEnum = "Invalid"
                // CardStateEnumNew ...
        CardStateEnumNew CardStateEnum = "New"
                // CardStateEnumUnknown ...
        CardStateEnumUnknown CardStateEnum = "Unknown"
            )
    // PossibleCardStateEnumValues returns an array of possible values for the CardStateEnum const type.
    func PossibleCardStateEnumValues() []CardStateEnum {
        return []CardStateEnum{CardStateEnumAuthorized,CardStateEnumDeleted,CardStateEnumExpired,CardStateEnumInvalid,CardStateEnumNew,CardStateEnumUnknown}
    }

        // CardTypeEnum enumerates the values for card type enum.
    type CardTypeEnum string

    const (
                // CardTypeEnumAmex ...
        CardTypeEnumAmex CardTypeEnum = "Amex"
                // CardTypeEnumDiscover ...
        CardTypeEnumDiscover CardTypeEnum = "Discover"
                // CardTypeEnumMasterCard ...
        CardTypeEnumMasterCard CardTypeEnum = "MasterCard"
                // CardTypeEnumUnknown ...
        CardTypeEnumUnknown CardTypeEnum = "Unknown"
                // CardTypeEnumVisa ...
        CardTypeEnumVisa CardTypeEnum = "Visa"
            )
    // PossibleCardTypeEnumValues returns an array of possible values for the CardTypeEnum const type.
    func PossibleCardTypeEnumValues() []CardTypeEnum {
        return []CardTypeEnum{CardTypeEnumAmex,CardTypeEnumDiscover,CardTypeEnumMasterCard,CardTypeEnumUnknown,CardTypeEnumVisa}
    }

        // PaymentType1Enum enumerates the values for payment type 1 enum.
    type PaymentType1Enum string

    const (
                // PaymentType1EnumACH ...
        PaymentType1EnumACH PaymentType1Enum = "ACH"
                // PaymentType1EnumCreditCard ...
        PaymentType1EnumCreditCard PaymentType1Enum = "Credit Card"
                // PaymentType1EnumUnknown ...
        PaymentType1EnumUnknown PaymentType1Enum = "Unknown"
            )
    // PossiblePaymentType1EnumValues returns an array of possible values for the PaymentType1Enum const type.
    func PossiblePaymentType1EnumValues() []PaymentType1Enum {
        return []PaymentType1Enum{PaymentType1EnumACH,PaymentType1EnumCreditCard,PaymentType1EnumUnknown}
    }

        // PaymentType2Enum enumerates the values for payment type 2 enum.
    type PaymentType2Enum string

    const (
                // PaymentType2EnumACH ...
        PaymentType2EnumACH PaymentType2Enum = "ACH"
                // PaymentType2EnumCreditCard ...
        PaymentType2EnumCreditCard PaymentType2Enum = "Credit Card"
                // PaymentType2EnumUnknown ...
        PaymentType2EnumUnknown PaymentType2Enum = "Unknown"
            )
    // PossiblePaymentType2EnumValues returns an array of possible values for the PaymentType2Enum const type.
    func PossiblePaymentType2EnumValues() []PaymentType2Enum {
        return []PaymentType2Enum{PaymentType2EnumACH,PaymentType2EnumCreditCard,PaymentType2EnumUnknown}
    }

        // PaymentTypeEnum enumerates the values for payment type enum.
    type PaymentTypeEnum string

    const (
                // PaymentTypeEnumACH ...
        PaymentTypeEnumACH PaymentTypeEnum = "ACH"
                // PaymentTypeEnumCreditCard ...
        PaymentTypeEnumCreditCard PaymentTypeEnum = "Credit Card"
                // PaymentTypeEnumUnknown ...
        PaymentTypeEnumUnknown PaymentTypeEnum = "Unknown"
            )
    // PossiblePaymentTypeEnumValues returns an array of possible values for the PaymentTypeEnum const type.
    func PossiblePaymentTypeEnumValues() []PaymentTypeEnum {
        return []PaymentTypeEnum{PaymentTypeEnumACH,PaymentTypeEnumCreditCard,PaymentTypeEnumUnknown}
    }

        // State1Enum enumerates the values for state 1 enum.
    type State1Enum string

    const (
                // Active ...
        Active State1Enum = "Active"
                // Expired ...
        Expired State1Enum = "Expired"
                // Inactive ...
        Inactive State1Enum = "Inactive"
            )
    // PossibleState1EnumValues returns an array of possible values for the State1Enum const type.
    func PossibleState1EnumValues() []State1Enum {
        return []State1Enum{Active,Expired,Inactive}
    }

        // State2Enum enumerates the values for state 2 enum.
    type State2Enum string

    const (
                // State2EnumActive ...
        State2EnumActive State2Enum = "Active"
                // State2EnumExpired ...
        State2EnumExpired State2Enum = "Expired"
                // State2EnumInactive ...
        State2EnumInactive State2Enum = "Inactive"
            )
    // PossibleState2EnumValues returns an array of possible values for the State2Enum const type.
    func PossibleState2EnumValues() []State2Enum {
        return []State2Enum{State2EnumActive,State2EnumExpired,State2EnumInactive}
    }

        // State3Enum enumerates the values for state 3 enum.
    type State3Enum string

    const (
                // State3EnumActive ...
        State3EnumActive State3Enum = "Active"
                // State3EnumExpired ...
        State3EnumExpired State3Enum = "Expired"
                // State3EnumInactive ...
        State3EnumInactive State3Enum = "Inactive"
            )
    // PossibleState3EnumValues returns an array of possible values for the State3Enum const type.
    func PossibleState3EnumValues() []State3Enum {
        return []State3Enum{State3EnumActive,State3EnumExpired,State3EnumInactive}
    }

        // State4Enum enumerates the values for state 4 enum.
    type State4Enum string

    const (
                // State4EnumActive ...
        State4EnumActive State4Enum = "Active"
                // State4EnumExpired ...
        State4EnumExpired State4Enum = "Expired"
                // State4EnumInactive ...
        State4EnumInactive State4Enum = "Inactive"
            )
    // PossibleState4EnumValues returns an array of possible values for the State4Enum const type.
    func PossibleState4EnumValues() []State4Enum {
        return []State4Enum{State4EnumActive,State4EnumExpired,State4EnumInactive}
    }

        // StateEnum enumerates the values for state enum.
    type StateEnum string

    const (
                // StateEnumAuthorized ...
        StateEnumAuthorized StateEnum = "Authorized"
                // StateEnumDisabled ...
        StateEnumDisabled StateEnum = "Disabled"
                // StateEnumNew ...
        StateEnumNew StateEnum = "New"
                // StateEnumPending ...
        StateEnumPending StateEnum = "Pending"
                // StateEnumUnknown ...
        StateEnumUnknown StateEnum = "Unknown"
            )
    // PossibleStateEnumValues returns an array of possible values for the StateEnum const type.
    func PossibleStateEnumValues() []StateEnum {
        return []StateEnum{StateEnumAuthorized,StateEnumDisabled,StateEnumNew,StateEnumPending,StateEnumUnknown}
    }

        // Status1Enum enumerates the values for status 1 enum.
    type Status1Enum string

    const (
                // Status1EnumAuthorized ...
        Status1EnumAuthorized Status1Enum = "Authorized"
                // Status1EnumCancelled ...
        Status1EnumCancelled Status1Enum = "Cancelled"
                // Status1EnumCaptured ...
        Status1EnumCaptured Status1Enum = "Captured"
                // Status1EnumChargeBack ...
        Status1EnumChargeBack Status1Enum = "Charge Back"
                // Status1EnumDeclined ...
        Status1EnumDeclined Status1Enum = "Declined"
                // Status1EnumExpired ...
        Status1EnumExpired Status1Enum = "Expired"
                // Status1EnumFailed ...
        Status1EnumFailed Status1Enum = "Failed"
                // Status1EnumNew ...
        Status1EnumNew Status1Enum = "New"
                // Status1EnumPartiallyRefunded ...
        Status1EnumPartiallyRefunded Status1Enum = "Partially Refunded"
                // Status1EnumRefunded ...
        Status1EnumRefunded Status1Enum = "Refunded"
                // Status1EnumUnknown ...
        Status1EnumUnknown Status1Enum = "Unknown"
            )
    // PossibleStatus1EnumValues returns an array of possible values for the Status1Enum const type.
    func PossibleStatus1EnumValues() []Status1Enum {
        return []Status1Enum{Status1EnumAuthorized,Status1EnumCancelled,Status1EnumCaptured,Status1EnumChargeBack,Status1EnumDeclined,Status1EnumExpired,Status1EnumFailed,Status1EnumNew,Status1EnumPartiallyRefunded,Status1EnumRefunded,Status1EnumUnknown}
    }

        // StatusEnum enumerates the values for status enum.
    type StatusEnum string

    const (
                // StatusEnumAuthorized ...
        StatusEnumAuthorized StatusEnum = "Authorized"
                // StatusEnumCancelled ...
        StatusEnumCancelled StatusEnum = "Cancelled"
                // StatusEnumCaptured ...
        StatusEnumCaptured StatusEnum = "Captured"
                // StatusEnumChargeBack ...
        StatusEnumChargeBack StatusEnum = "Charge Back"
                // StatusEnumDeclined ...
        StatusEnumDeclined StatusEnum = "Declined"
                // StatusEnumExpired ...
        StatusEnumExpired StatusEnum = "Expired"
                // StatusEnumFailed ...
        StatusEnumFailed StatusEnum = "Failed"
                // StatusEnumNew ...
        StatusEnumNew StatusEnum = "New"
                // StatusEnumPartiallyRefunded ...
        StatusEnumPartiallyRefunded StatusEnum = "Partially Refunded"
                // StatusEnumRefunded ...
        StatusEnumRefunded StatusEnum = "Refunded"
                // StatusEnumUnknown ...
        StatusEnumUnknown StatusEnum = "Unknown"
            )
    // PossibleStatusEnumValues returns an array of possible values for the StatusEnum const type.
    func PossibleStatusEnumValues() []StatusEnum {
        return []StatusEnum{StatusEnumAuthorized,StatusEnumCancelled,StatusEnumCaptured,StatusEnumChargeBack,StatusEnumDeclined,StatusEnumExpired,StatusEnumFailed,StatusEnumNew,StatusEnumPartiallyRefunded,StatusEnumRefunded,StatusEnumUnknown}
    }

        // Type1Enum enumerates the values for type 1 enum.
    type Type1Enum string

    const (
                // Type1EnumChecking ...
        Type1EnumChecking Type1Enum = "Checking"
                // Type1EnumSavings ...
        Type1EnumSavings Type1Enum = "Savings"
                // Type1EnumUnknown ...
        Type1EnumUnknown Type1Enum = "Unknown"
            )
    // PossibleType1EnumValues returns an array of possible values for the Type1Enum const type.
    func PossibleType1EnumValues() []Type1Enum {
        return []Type1Enum{Type1EnumChecking,Type1EnumSavings,Type1EnumUnknown}
    }

        // Type2Enum enumerates the values for type 2 enum.
    type Type2Enum string

    const (
                // Type2EnumACH ...
        Type2EnumACH Type2Enum = "ACH"
                // Type2EnumCreditCard ...
        Type2EnumCreditCard Type2Enum = "Credit Card"
                // Type2EnumUnknown ...
        Type2EnumUnknown Type2Enum = "Unknown"
            )
    // PossibleType2EnumValues returns an array of possible values for the Type2Enum const type.
    func PossibleType2EnumValues() []Type2Enum {
        return []Type2Enum{Type2EnumACH,Type2EnumCreditCard,Type2EnumUnknown}
    }

        // TypeEnum enumerates the values for type enum.
    type TypeEnum string

    const (
                // TypeEnumChecking ...
        TypeEnumChecking TypeEnum = "Checking"
                // TypeEnumSavings ...
        TypeEnumSavings TypeEnum = "Savings"
                // TypeEnumUnknown ...
        TypeEnumUnknown TypeEnum = "Unknown"
            )
    // PossibleTypeEnumValues returns an array of possible values for the TypeEnum const type.
    func PossibleTypeEnumValues() []TypeEnum {
        return []TypeEnum{TypeEnumChecking,TypeEnumSavings,TypeEnumUnknown}
    }

    // AddressType defines the properties and methods of an address.
    type AddressType struct {
    // Address1 - The first line of the street address.  Typcically contains
    // the number and street name.
    Address1 *string `json:"address1,omitempty"`
    // Address2 - The second line of the street address.  Typically contains
    // an apartment number, suite number or department.
    Address2 *string `json:"address2,omitempty"`
    // City - The city where the address is situated.
    City *string `json:"city,omitempty"`
    // State - The state where the address is located.
    State *string `json:"state,omitempty"`
    // ZipCode - The postal code for the address.
    ZipCode *string `json:"zipCode,omitempty"`
    }

    // BankAccountModelType the model sent to the client in response to a GET request for a bank account.
    type BankAccountModelType struct {
    autorest.Response `json:"-"`
    // ID - Gets or sets the identifier.
    ID *int32 `json:"id,omitempty"`
    // Token - The payment token for the bank account.
    Token *string `json:"token,omitempty"`
    // AccountNumber - The bank account number.
    AccountNumber *string `json:"accountNumber,omitempty"`
    // RoutingNumber - The routing number of the bank where the bank account was opened.
    RoutingNumber *string `json:"routingNumber,omitempty"`
    // Type - The bank account type. Possible values include: 'TypeEnumUnknown', 'TypeEnumChecking', 'TypeEnumSavings'
    Type TypeEnum `json:"type,omitempty"`
    // State - The state that the bank acocunt is in. Possible values include: 'StateEnumUnknown', 'StateEnumNew', 'StateEnumPending', 'StateEnumAuthorized', 'StateEnumDisabled'
    State StateEnum `json:"state,omitempty"`
    // Nickname - The aribtrary nickname of the account, used as a way to identify the account.
    Nickname *string `json:"nickname,omitempty"`
    // AccountHolderName - The name of the individual or entity that is autorized to make transactions for the bank account.
    AccountHolderName *string `json:"accountHolderName,omitempty"`
    // AccountHolderAddress - The mailing address for the account holder.
    AccountHolderAddress *AddressType `json:"accountHolderAddress,omitempty"`
    // Email - The email address for the account holder.
    Email *string `json:"email,omitempty"`
    // ReferenceID - The client application provided reference ID for the bank account.
    ReferenceID *string `json:"referenceId,omitempty"`
    // CreatedTime - The timestamp indicating when the bank account was created.
    CreatedTime *date.Time `json:"createdTime,omitempty"`
    // ModifiedTime - The timestamp indicating the last time that the details of the bank account were modified.
    ModifiedTime *date.Time `json:"modifiedTime,omitempty"`
    }

    // BankAccountRequestModelType the request model sent by the client for adding new bank accounts to the payment
    // platform.
    type BankAccountRequestModelType struct {
    // AccountNumber - The bank account number.
    AccountNumber *string `json:"accountNumber,omitempty"`
    // RoutingNumber - The routing number of the bank where the bank account was opened.
    RoutingNumber *string `json:"routingNumber,omitempty"`
    // AccountHolderName - The name of the individual or entity that is autorized to make transactions for the bank account.
    AccountHolderName *string `json:"accountHolderName,omitempty"`
    // AccountHolderAddress - The mailing address for the account holder.
    AccountHolderAddress *AddressType `json:"accountHolderAddress,omitempty"`
    // Type - The bank account type. Possible values include: 'Type1EnumUnknown', 'Type1EnumChecking', 'Type1EnumSavings'
    Type Type1Enum `json:"type,omitempty"`
    // ReferenceID - The client application provided reference ID for the bank account.
    ReferenceID *string `json:"referenceId,omitempty"`
    // Nickname - The aribtrary nickname of the account, used as a way to identify the account.
    Nickname *string `json:"nickname,omitempty"`
    // Email - The email address for the account holder.
    Email *string `json:"email,omitempty"`
    // RedirectURL - The url that the client will be redirected to after the bank account has been created.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    }

    // BankAccountResponseModelType the response model that is returned to the client when a new bank account is added
    // to the platform
    type BankAccountResponseModelType struct {
    autorest.Response `json:"-"`
    // Token - The payment token for the bank account.
    Token *string `json:"token,omitempty"`
    // BankAccountState - The state that the bank acocunt is in. Possible values include: 'BankAccountStateEnumUnknown', 'BankAccountStateEnumNew', 'BankAccountStateEnumPending', 'BankAccountStateEnumAuthorized', 'BankAccountStateEnumDisabled'
    BankAccountState BankAccountStateEnum `json:"bankAccountState,omitempty"`
    // RedirectURL - The url that the client will be redirected to after the bank account has been created.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    }

    // BaseQueryType a base collection of query parameters
    type BaseQueryType struct {
    // ReferenceID - Gets or sets the reference identifier.
    ReferenceID *string `json:"referenceId,omitempty"`
    // MinDate - Gets or sets the minimum date.
    MinDate *date.Time `json:"minDate,omitempty"`
    // MaxDate - Gets or sets the maximum date.
    MaxDate *date.Time `json:"maxDate,omitempty"`
    }

    // BinRequestModelType the request model sent by the client for retrieving credit card bin information.
    type BinRequestModelType struct {
    // CardNumber - The number on the credit card.
    CardNumber *string `json:"cardNumber,omitempty"`
    }

    // BinType defines a BIN (bank identification number)
    type BinType struct {
    autorest.Response `json:"-"`
    // Bin - Gets the bin.
    Bin *string `json:"bin,omitempty"`
    // Brand - Gets or sets the brand. Possible values include: 'Unknown', 'Visa', 'MasterCard', 'Amex', 'Discover'
    Brand BrandEnum `json:"brand,omitempty"`
    // IsDebitCard - Gets or sets a value indicating whether this instance is debit.
    IsDebitCard *bool `json:"isDebitCard,omitempty"`
    // IsCheckCard - Gets or sets a value indicating whether this instance is check card.
    IsCheckCard *bool `json:"isCheckCard,omitempty"`
    // IsGiftCard - Gets or sets a value indicating whether this instance is gift card.
    IsGiftCard *bool `json:"isGiftCard,omitempty"`
    // IsCorporateCard - Gets or sets a value indicating whether this instance is corporate card.
    IsCorporateCard *bool `json:"isCorporateCard,omitempty"`
    // IsFleetCard - Gets or sets a value indicating whether this instance is fleet card.
    IsFleetCard *bool `json:"isFleetCard,omitempty"`
    // IsPrepaidCard - Gets or sets a value indicating whether this instance is prepaid card.
    IsPrepaidCard *bool `json:"isPrepaidCard,omitempty"`
    }

    // CheckoutRequestModelType checkout request model
    type CheckoutRequestModelType struct {
    // RedirectURL - Gets or sets the redirect URL.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    // ReferenceID - Gets or sets the reference identifier.
    ReferenceID *string `json:"referenceId,omitempty"`
    // Amount - Gets or sets the amount.
    Amount *float64 `json:"amount,omitempty"`
    // NameOnAccount - Gets or sets the name on account.
    NameOnAccount *string `json:"nameOnAccount,omitempty"`
    // ExpirationDate - Gets or sets the expiration date.
    ExpirationDate *date.Time `json:"expirationDate,omitempty"`
    // EnableBillingInformation - Gets or sets a value indicating whether [enable billing information].
    EnableBillingInformation *bool `json:"enableBillingInformation,omitempty"`
    // BillingAddress - Gets or sets the billing address.
    BillingAddress *AddressType `json:"billingAddress,omitempty"`
    // Email - Gets or sets the email.
    Email *string `json:"email,omitempty"`
    // RequireEmail - Gets or sets a value indicating whether [require email].
    RequireEmail *bool `json:"requireEmail,omitempty"`
    // EnableSaveOption - Gets or sets a value indicating whether [enable save option].
    EnableSaveOption *bool `json:"enableSaveOption,omitempty"`
    }

    // CheckoutResponseModelType checkout Response
    type CheckoutResponseModelType struct {
    autorest.Response `json:"-"`
    // CheckoutID - Gets or sets the checkout identifier.
    CheckoutID *int32 `json:"checkoutId,omitempty"`
    // ClientID - Gets or sets the client identifier.
    ClientID *string `json:"clientId,omitempty"`
    // RedirectURL - Gets or sets the redirect URL.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    // ReferenceID - Gets or sets the reference identifier.
    ReferenceID *string `json:"referenceId,omitempty"`
    // Amount - Gets or sets the amount.
    Amount *float64 `json:"amount,omitempty"`
    // NameOnAccount - Gets or sets the name on account.
    NameOnAccount *string `json:"nameOnAccount,omitempty"`
    // ExpirationDate - Gets or sets the expiration date.
    ExpirationDate *date.Time `json:"expirationDate,omitempty"`
    // EnableBillingInformation - Gets or sets a value indicating whether [enable billing information].
    EnableBillingInformation *bool `json:"enableBillingInformation,omitempty"`
    // BillingAddress - Gets or sets the billing address.
    BillingAddress *AddressType `json:"billingAddress,omitempty"`
    // Email - Gets or sets the email.
    Email *string `json:"email,omitempty"`
    // RequireEmail - Gets or sets a value indicating whether [require email].
    RequireEmail *bool `json:"requireEmail,omitempty"`
    // EnableSaveOption - Gets or sets a value indicating whether [enable save option].
    EnableSaveOption *bool `json:"enableSaveOption,omitempty"`
    }

    // CreditCardModelType the model sent to the client in response to a GET request for a credit card.
    type CreditCardModelType struct {
    // ID - Gets or sets the identifier.
    ID *int32 `json:"id,omitempty"`
    // Token - The payment token for the credit card.
    Token *string `json:"token,omitempty"`
    // CardHolderName - The name of the cardholder, as it appears on the front of the credit card.
    CardHolderName *string `json:"cardHolderName,omitempty"`
    // CardNumber - The obfuscated credit card number for the credit card, such as xxxxxxxxxxxx1234
    CardNumber *string `json:"cardNumber,omitempty"`
    // ExpirationMonth - The expiration month of the credit card.
    ExpirationMonth *int32 `json:"expirationMonth,omitempty"`
    // ExpirationYear - The expiration year of the credit card.
    ExpirationYear *int32 `json:"expirationYear,omitempty"`
    // BillingAddress - The billing address for the credit card holder.
    BillingAddress *AddressType `json:"billingAddress,omitempty"`
    // Email - The email address for the credit card holder.
    Email *string `json:"email,omitempty"`
    // CardState - The state that the credit card is in. Possible values include: 'CardStateEnumUnknown', 'CardStateEnumNew', 'CardStateEnumAuthorized', 'CardStateEnumExpired', 'CardStateEnumDeleted', 'CardStateEnumInvalid'
    CardState CardStateEnum `json:"cardState,omitempty"`
    // CardType - Gets or sets the type of the card. Possible values include: 'CardTypeEnumUnknown', 'CardTypeEnumVisa', 'CardTypeEnumMasterCard', 'CardTypeEnumAmex', 'CardTypeEnumDiscover'
    CardType CardTypeEnum `json:"cardType,omitempty"`
    // ReferenceID - The client application provided reference ID for the credit card.
    ReferenceID *string `json:"referenceId,omitempty"`
    // CreatedTime - The timestamp indicating when the credit card was created.
    CreatedTime *date.Time `json:"createdTime,omitempty"`
    // ModifiedTime - The timestamp indicating the last time that the details of the credit card were modified.
    ModifiedTime *date.Time `json:"modifiedTime,omitempty"`
    }

    // CreditCardRequestModelType the request model sent by the client for adding new credit cards to the payment
    // platform.
    type CreditCardRequestModelType struct {
    // CardNumber - The number on the credit card.
    CardNumber *string `json:"cardNumber,omitempty"`
    // SecurityCode - The security, or CVV code, on the card.
    SecurityCode *string `json:"securityCode,omitempty"`
    // ExpirationMonth - The expiration month of the credit card.
    ExpirationMonth *int32 `json:"expirationMonth,omitempty"`
    // ExpirationYear - The expiration year of the credit card.
    ExpirationYear *int32 `json:"expirationYear,omitempty"`
    // CardHolderName - The name of the cardholder, as it appears on the front of the credit card.
    CardHolderName *string `json:"cardHolderName,omitempty"`
    // BillingAddress - The billing address for the credit card holder..
    BillingAddress *AddressType `json:"billingAddress,omitempty"`
    // Email - A valid email address for the card holder.
    Email *string `json:"email,omitempty"`
    // ReferenceID - The client application provided reference ID for the credit card.
    ReferenceID *string `json:"referenceId,omitempty"`
    // RedirectURL - The url that the client will be redirected to after the credit card has been created.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    }

    // CreditCardResponseModelType the response model sent to the client when a new credit card is added to the
    // platform.
    type CreditCardResponseModelType struct {
    autorest.Response `json:"-"`
    // Token - The payment token for the credit card
    Token *string `json:"token,omitempty"`
    // CardState - The state that the credit card is in. Possible values include: 'CardState1EnumUnknown', 'CardState1EnumNew', 'CardState1EnumAuthorized', 'CardState1EnumExpired', 'CardState1EnumDeleted', 'CardState1EnumInvalid'
    CardState CardState1Enum `json:"cardState,omitempty"`
    // Code - The pre-authorization result code.
    Code *string `json:"code,omitempty"`
    // Message - The pre-authorization result message.
    Message *string `json:"message,omitempty"`
    // RedirectURL - The URL that the client will be redirected to after the credit card has been created.
    RedirectURL *string `json:"redirectUrl,omitempty"`
    }

    // Int32Type ...
    type Int32Type struct {
    autorest.Response `json:"-"`
    Value *int32 `json:"value,omitempty"`
    }

    // ListBankAccountModelType ...
    type ListBankAccountModelType struct {
    autorest.Response `json:"-"`
    Value *[]BankAccountModelType `json:"value,omitempty"`
    }

    // ListCreditCardModelType ...
    type ListCreditCardModelType struct {
    autorest.Response `json:"-"`
    Value *[]CreditCardModelType `json:"value,omitempty"`
    }

    // ListPaymentModelType ...
    type ListPaymentModelType struct {
    autorest.Response `json:"-"`
    Value *[]PaymentModelType `json:"value,omitempty"`
    }

    // ListRefundResultModelType ...
    type ListRefundResultModelType struct {
    autorest.Response `json:"-"`
    Value *[]RefundResultModelType `json:"value,omitempty"`
    }

    // ListSubscriptionModelType ...
    type ListSubscriptionModelType struct {
    autorest.Response `json:"-"`
    Value *[]SubscriptionModelType `json:"value,omitempty"`
    }

    // PaymentMethodModelType defines a a funding source for a payment request.
    type PaymentMethodModelType struct {
    // PaymentToken - The credit card or bank account token that will be used for payment.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // Type - The type of funding source that will be used for the payment. Possible values include: 'Type2EnumUnknown', 'Type2EnumCreditCard', 'Type2EnumACH'
    Type Type2Enum `json:"type,omitempty"`
    }

    // PaymentModelType the model sent to the client requests the details of a payment, or adds a new payment
    // to the platform.
    type PaymentModelType struct {
    autorest.Response `json:"-"`
    // ID - The unique ID of the payment.
    ID *int64 `json:"id,omitempty"`
    // AccountID - The unique ID of the account that the payment was made for.
    AccountID *int32 `json:"accountId,omitempty"`
    // PaymentAmount - The payment amount.
    PaymentAmount *float64 `json:"paymentAmount,omitempty"`
    // Description - The description of what was paid for.
    Description *string `json:"description,omitempty"`
    // ReferenceID - The client application provided reference ID for the payment.
    ReferenceID *string `json:"referenceId,omitempty"`
    // PaymentMethod - The method of payment.
    PaymentMethod *PaymentMethodModelType `json:"paymentMethod,omitempty"`
    // Result - The result of the payment request.
    Result *PaymentResultModelType `json:"result,omitempty"`
    // Refunds - Gets or sets the refund result.
    Refunds *[]RefundResultModelType `json:"refunds,omitempty"`
    // CreatedDate - The timestamp indicating when the payment was created.
    CreatedDate *date.Time `json:"createdDate,omitempty"`
    // ModifiedDate - The timestamp indicating the last time that the details of the payment were modified.
    ModifiedDate *date.Time `json:"modifiedDate,omitempty"`
    }

    // PaymentRequestModelType the request model sent by the client to add a new payment to the platform.
    type PaymentRequestModelType struct {
    // PaymentAmount - The payment amount.
    PaymentAmount *float64 `json:"paymentAmount,omitempty"`
    // Description - The description of what will be paid for.
    Description *string `json:"description,omitempty"`
    // ReferenceID - The client application provided reference ID for the payment.
    ReferenceID *string `json:"referenceId,omitempty"`
    // PaymentMethod - The method of payment.
    PaymentMethod *PaymentMethodModelType `json:"paymentMethod,omitempty"`
    // CallbackURL - The callback URL where payment notifications will be sent.  Payment notifications are sent when the
    // state of a payment changes.  Notifications will be sent as an HTTP POST to the URL provided and will
    // contain a PaymentId and optional ReferenceId, if one was provided when the payment was created.
    CallbackURL *string `json:"callbackUrl,omitempty"`
    }

    // PaymentResultModelType the model sent to the client as a part of the payment model.
    // Provides details on the payment result.
    type PaymentResultModelType struct {
    // Status - The current status of the payment. Possible values include: 'StatusEnumUnknown', 'StatusEnumNew', 'StatusEnumAuthorized', 'StatusEnumCaptured', 'StatusEnumExpired', 'StatusEnumDeclined', 'StatusEnumFailed', 'StatusEnumCancelled', 'StatusEnumChargeBack', 'StatusEnumRefunded', 'StatusEnumPartiallyRefunded'
    Status StatusEnum `json:"status,omitempty"`
    // Code - The payment result code.
    Code *string `json:"code,omitempty"`
    // Message - The payment result message.
    Message *string `json:"message,omitempty"`
    // ProviderAccountID - The unique ID of the provider account that was used to make this payment.
    ProviderAccountID *string `json:"providerAccountId,omitempty"`
    // MerchantTransactionID - Tthe merchant transaction identifier.
    MerchantTransactionID *string `json:"merchantTransactionId,omitempty"`
    // MerchantTransactionFee - The merchant transaction fee.
    MerchantTransactionFee *float64 `json:"merchantTransactionFee,omitempty"`
    }

    // RefundRequestModelType the request model sent by the client to add a new refund to the platform.
    type RefundRequestModelType struct {
    // Amount - The amount to be refunded.  If an amount less than the original payment amount is
    // specified, a partial refund will be processed.  If no amount is specified, a full refund
    // will be processed.
    Amount *float64 `json:"amount,omitempty"`
    // Reason - The reason for issuing the refund.
    Reason *string `json:"reason,omitempty"`
    }

    // RefundResultModelType the model sent to the client as a part of the payment model.
    // Provides details on the refund result.
    type RefundResultModelType struct {
    autorest.Response `json:"-"`
    // Status - The current status of the refund. Possible values include: 'Status1EnumUnknown', 'Status1EnumNew', 'Status1EnumAuthorized', 'Status1EnumCaptured', 'Status1EnumExpired', 'Status1EnumDeclined', 'Status1EnumFailed', 'Status1EnumCancelled', 'Status1EnumChargeBack', 'Status1EnumRefunded', 'Status1EnumPartiallyRefunded'
    Status Status1Enum `json:"status,omitempty"`
    // Code - The refund result code.
    Code *string `json:"code,omitempty"`
    // Message - The refund result message.
    Message *string `json:"message,omitempty"`
    // MerchantTransactionID - The Merchant Transaction ID number for the payment that is being refunded.
    MerchantTransactionID *string `json:"merchantTransactionId,omitempty"`
    // ProviderAccountID - The unique ID of the provider account that was used to make this refund.
    ProviderAccountID *string `json:"providerAccountId,omitempty"`
    // Amount - The amount to be refunded.  If an amount less than the original payment amount is
    // specified, a partial refund will be processed.  If no amount is specified, a full refund
    // will be processed.
    Amount *float64 `json:"amount,omitempty"`
    // Reason - The reason for issuing the refund.
    Reason *string `json:"reason,omitempty"`
    // CreatedDate - The timestamp indicating when the refund was created.
    CreatedDate *date.Time `json:"createdDate,omitempty"`
    }

    // SubscriptionModelType the model sent to the client in response to a GET request for a payment subscription.
    type SubscriptionModelType struct {
    autorest.Response `json:"-"`
    // ID - The id of the payment subscription.
    ID *int32 `json:"id,omitempty"`
    // Name - The name of payment subscription.
    Name *string `json:"name,omitempty"`
    // Description - The description of payment subscription.
    Description *string `json:"description,omitempty"`
    // Properties - The properties of the payment subscription.
    Properties map[string]*string `json:"properties"`
    // RunDay - The process day of the payment subscription.
    RunDay *int32 `json:"runDay,omitempty"`
    // State - The state that payment subscription is in. Possible values include: 'Active', 'Inactive', 'Expired'
    State State1Enum `json:"state,omitempty"`
    // PaymentType - The payment type of the payment subscription. Possible values include: 'PaymentTypeEnumUnknown', 'PaymentTypeEnumCreditCard', 'PaymentTypeEnumACH'
    PaymentType PaymentTypeEnum `json:"paymentType,omitempty"`
    // PaymentToken - The payment token of the payment subscription.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // AmountType - The amount type of the payment subscription. Possible values include: 'AmountTypeEnumFixed', 'AmountTypeEnumDynamic'
    AmountType AmountTypeEnum `json:"amountType,omitempty"`
    // Amount - The amount of money to be charged by the payment subscription.
    Amount *float64 `json:"amount,omitempty"`
    // AmountWebServiceURL - The url of web api to use to retrieve the amount to be charged by the payment subscription.
    AmountWebServiceURL *string `json:"amountWebServiceURL,omitempty"`
    // CallbackWebServiceURL - The url of a web api to use to post back notifications each time payment subscription is processed.
    CallbackWebServiceURL *string `json:"callbackWebServiceURL,omitempty"`
    // ReferenceID - The client application provided reference ID for the credit card.
    ReferenceID *string `json:"referenceId,omitempty"`
    // LastProcessed - The timestamp indicating when the subscription was last processed.
    LastProcessed *date.Time `json:"lastProcessed,omitempty"`
    // EndDate - The date indicating when the payment subscription should be stopped.
    EndDate *date.Time `json:"endDate,omitempty"`
    // CreatedTime - The timestamp indicating when the credit card was created.
    CreatedTime *date.Time `json:"createdTime,omitempty"`
    // ModifiedTime - The timestamp indicating the last time that the details of the credit card were modified.
    ModifiedTime *date.Time `json:"modifiedTime,omitempty"`
    }

        // MarshalJSON is the custom marshaler for SubscriptionModelType.
        func (smt SubscriptionModelType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(smt.ID != nil) {
                objectMap["id"] = smt.ID
                }
                if(smt.Name != nil) {
                objectMap["name"] = smt.Name
                }
                if(smt.Description != nil) {
                objectMap["description"] = smt.Description
                }
                if(smt.Properties != nil) {
                objectMap["properties"] = smt.Properties
                }
                if(smt.RunDay != nil) {
                objectMap["runDay"] = smt.RunDay
                }
                if(smt.State != "") {
                objectMap["state"] = smt.State
                }
                if(smt.PaymentType != "") {
                objectMap["paymentType"] = smt.PaymentType
                }
                if(smt.PaymentToken != nil) {
                objectMap["paymentToken"] = smt.PaymentToken
                }
                if(smt.AmountType != "") {
                objectMap["amountType"] = smt.AmountType
                }
                if(smt.Amount != nil) {
                objectMap["amount"] = smt.Amount
                }
                if(smt.AmountWebServiceURL != nil) {
                objectMap["amountWebServiceURL"] = smt.AmountWebServiceURL
                }
                if(smt.CallbackWebServiceURL != nil) {
                objectMap["callbackWebServiceURL"] = smt.CallbackWebServiceURL
                }
                if(smt.ReferenceID != nil) {
                objectMap["referenceId"] = smt.ReferenceID
                }
                if(smt.LastProcessed != nil) {
                objectMap["lastProcessed"] = smt.LastProcessed
                }
                if(smt.EndDate != nil) {
                objectMap["endDate"] = smt.EndDate
                }
                if(smt.CreatedTime != nil) {
                objectMap["createdTime"] = smt.CreatedTime
                }
                if(smt.ModifiedTime != nil) {
                objectMap["modifiedTime"] = smt.ModifiedTime
                }
                return json.Marshal(objectMap)
        }

    // SubscriptionRequestModelType the request model sent by the client for adding new subscription to the payment
    // platform.
    type SubscriptionRequestModelType struct {
    // Name - The name of payment subscription.
    Name *string `json:"name,omitempty"`
    // Description - The description of payment subscription.
    Description *string `json:"description,omitempty"`
    // Properties - The properties of the payment subscription.
    Properties map[string]*string `json:"properties"`
    // RunDay - The process day of the payment subscription.
    RunDay *int32 `json:"runDay,omitempty"`
    // State - The state that payment subscription is in. Possible values include: 'State3EnumActive', 'State3EnumInactive', 'State3EnumExpired'
    State State3Enum `json:"state,omitempty"`
    // PaymentType - The payment type of the payment subscription. Possible values include: 'PaymentType2EnumUnknown', 'PaymentType2EnumCreditCard', 'PaymentType2EnumACH'
    PaymentType PaymentType2Enum `json:"paymentType,omitempty"`
    // PaymentToken - The payment token of the payment subscription.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // AmountType - The amount type of the payment subscription. Possible values include: 'AmountType2EnumFixed', 'AmountType2EnumDynamic'
    AmountType AmountType2Enum `json:"amountType,omitempty"`
    // Amount - The amount of money to be charged by the payment subscription.
    Amount *float64 `json:"amount,omitempty"`
    // AmountWebServiceURL - The url of web api to use to retrieve the amount to be charged by the payment subscription.
    AmountWebServiceURL *string `json:"amountWebServiceURL,omitempty"`
    // CallbackWebServiceURL - The url of a web api to use to post back notifications each time payment subscription is processed.
    CallbackWebServiceURL *string `json:"callbackWebServiceURL,omitempty"`
    // EndDate - The date indicating when the payment subscription should be stopped.
    EndDate *date.Time `json:"endDate,omitempty"`
    // ReferenceID - The client application provided reference ID for the credit card.
    ReferenceID *string `json:"referenceId,omitempty"`
    }

        // MarshalJSON is the custom marshaler for SubscriptionRequestModelType.
        func (srmt SubscriptionRequestModelType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(srmt.Name != nil) {
                objectMap["name"] = srmt.Name
                }
                if(srmt.Description != nil) {
                objectMap["description"] = srmt.Description
                }
                if(srmt.Properties != nil) {
                objectMap["properties"] = srmt.Properties
                }
                if(srmt.RunDay != nil) {
                objectMap["runDay"] = srmt.RunDay
                }
                if(srmt.State != "") {
                objectMap["state"] = srmt.State
                }
                if(srmt.PaymentType != "") {
                objectMap["paymentType"] = srmt.PaymentType
                }
                if(srmt.PaymentToken != nil) {
                objectMap["paymentToken"] = srmt.PaymentToken
                }
                if(srmt.AmountType != "") {
                objectMap["amountType"] = srmt.AmountType
                }
                if(srmt.Amount != nil) {
                objectMap["amount"] = srmt.Amount
                }
                if(srmt.AmountWebServiceURL != nil) {
                objectMap["amountWebServiceURL"] = srmt.AmountWebServiceURL
                }
                if(srmt.CallbackWebServiceURL != nil) {
                objectMap["callbackWebServiceURL"] = srmt.CallbackWebServiceURL
                }
                if(srmt.EndDate != nil) {
                objectMap["endDate"] = srmt.EndDate
                }
                if(srmt.ReferenceID != nil) {
                objectMap["referenceId"] = srmt.ReferenceID
                }
                return json.Marshal(objectMap)
        }

    // SubscriptionResponseModelType the response model that is returned to the client when a new payment subscription
    // is added to the platform.
    type SubscriptionResponseModelType struct {
    autorest.Response `json:"-"`
    // ReferenceID - Gets or sets the reference id.
    ReferenceID *string `json:"referenceId,omitempty"`
    // State - Gets or sets the subscription state. Possible values include: 'State4EnumActive', 'State4EnumInactive', 'State4EnumExpired'
    State State4Enum `json:"state,omitempty"`
    }

    // UpdateBankAccountModelType the request model sent by the client for updating bank accounts in the payment
    // platform.
    type UpdateBankAccountModelType struct {
    // Token - The payment token for the bank account.
    Token *string `json:"token,omitempty"`
    // Nickname - The aribtrary nickname of the account, used as a way to identify the account.
    Nickname *string `json:"nickname,omitempty"`
    // AccountHolderName - The name of the individual or entity that is autorized to make transactions for the bank account.
    AccountHolderName *string `json:"accountHolderName,omitempty"`
    // AccountHolderAddress - The mailing address for the account holder.
    AccountHolderAddress *AddressType `json:"accountHolderAddress,omitempty"`
    // Email - The email address for the account holder.
    Email *string `json:"email,omitempty"`
    }

    // UpdateCreditCardModelType the request model sent by the client for updating credit cards in the payment
    // platform.
    type UpdateCreditCardModelType struct {
    // Token - The payment token for the credit card.
    Token *string `json:"token,omitempty"`
    // ExpirationMonth - The expiration month of the credit card.
    ExpirationMonth *int32 `json:"expirationMonth,omitempty"`
    // ExpirationYear - The expiration year of the credit card.
    ExpirationYear *int32 `json:"expirationYear,omitempty"`
    // CardHolderName - The name of the cardholder, as it appears on the front of the credit card.
    CardHolderName *string `json:"cardHolderName,omitempty"`
    // BillingAddress - The billing address for the credit card holder..
    BillingAddress *AddressType `json:"billingAddress,omitempty"`
    // Email - A valid email address for the card holder.
    Email *string `json:"email,omitempty"`
    }

    // UpdateSubscriptionModelType the request model sent by the client for updating subscription in the payment
    // platform.
    type UpdateSubscriptionModelType struct {
    // ID - The id of the payment subscription.
    ID *int32 `json:"id,omitempty"`
    // Name - The name of payment subscription.
    Name *string `json:"name,omitempty"`
    // Description - The description of payment subscription.
    Description *string `json:"description,omitempty"`
    // Properties - The properties of the payment subscription.
    Properties map[string]*string `json:"properties"`
    // RunDay - The process day of the payment subscription.
    RunDay *int32 `json:"runDay,omitempty"`
    // State - The state that payment subscription is in. Possible values include: 'State2EnumActive', 'State2EnumInactive', 'State2EnumExpired'
    State State2Enum `json:"state,omitempty"`
    // PaymentType - The payment type of the payment subscription. Possible values include: 'PaymentType1EnumUnknown', 'PaymentType1EnumCreditCard', 'PaymentType1EnumACH'
    PaymentType PaymentType1Enum `json:"paymentType,omitempty"`
    // PaymentToken - The payment token of the payment subscription.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // AmountType - The amount type of the payment subscription. Possible values include: 'Fixed', 'Dynamic'
    AmountType AmountType1Enum `json:"amountType,omitempty"`
    // Amount - The amount of money to be charged by the payment subscription.
    Amount *float64 `json:"amount,omitempty"`
    // AmountWebServiceURL - The url of web api to use to retrieve the amount to be charged by the payment subscription.
    AmountWebServiceURL *string `json:"amountWebServiceURL,omitempty"`
    // CallbackWebServiceURL - The url of a web api to use to post back notifications each time payment subscription is processed.
    CallbackWebServiceURL *string `json:"callbackWebServiceURL,omitempty"`
    // EndDate - The date indicating when the payment subscription should be stopped.
    EndDate *date.Time `json:"endDate,omitempty"`
    // ReferenceID - The client application provided reference ID for the credit card.
    ReferenceID *string `json:"referenceId,omitempty"`
    }

        // MarshalJSON is the custom marshaler for UpdateSubscriptionModelType.
        func (usmt UpdateSubscriptionModelType)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(usmt.ID != nil) {
                objectMap["id"] = usmt.ID
                }
                if(usmt.Name != nil) {
                objectMap["name"] = usmt.Name
                }
                if(usmt.Description != nil) {
                objectMap["description"] = usmt.Description
                }
                if(usmt.Properties != nil) {
                objectMap["properties"] = usmt.Properties
                }
                if(usmt.RunDay != nil) {
                objectMap["runDay"] = usmt.RunDay
                }
                if(usmt.State != "") {
                objectMap["state"] = usmt.State
                }
                if(usmt.PaymentType != "") {
                objectMap["paymentType"] = usmt.PaymentType
                }
                if(usmt.PaymentToken != nil) {
                objectMap["paymentToken"] = usmt.PaymentToken
                }
                if(usmt.AmountType != "") {
                objectMap["amountType"] = usmt.AmountType
                }
                if(usmt.Amount != nil) {
                objectMap["amount"] = usmt.Amount
                }
                if(usmt.AmountWebServiceURL != nil) {
                objectMap["amountWebServiceURL"] = usmt.AmountWebServiceURL
                }
                if(usmt.CallbackWebServiceURL != nil) {
                objectMap["callbackWebServiceURL"] = usmt.CallbackWebServiceURL
                }
                if(usmt.EndDate != nil) {
                objectMap["endDate"] = usmt.EndDate
                }
                if(usmt.ReferenceID != nil) {
                objectMap["referenceId"] = usmt.ReferenceID
                }
                return json.Marshal(objectMap)
        }

    // WalletBankAccountRequestModelType wallet Bank Account Request Model
    type WalletBankAccountRequestModelType struct {
    // PaymentToken - Gets or sets the payment token.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // IsDefault - Gets or sets a value indicating whether this instance is default.
    IsDefault *bool `json:"isDefault,omitempty"`
    }

    // WalletCreditCardRequestModelType wallet credit card request model
    type WalletCreditCardRequestModelType struct {
    // PaymentToken - Gets or sets the payment token.
    PaymentToken *string `json:"paymentToken,omitempty"`
    // IsDefault - Gets or sets a value indicating whether this instance is default.
    IsDefault *bool `json:"isDefault,omitempty"`
    }

    // WalletModelType wallet Model
    type WalletModelType struct {
    autorest.Response `json:"-"`
    // ID - Gets or sets the identifier.
    ID *int32 `json:"id,omitempty"`
    // DefaultToken - Gets or sets the default token.
    DefaultToken *string `json:"defaultToken,omitempty"`
    // CreditCards - Gets or sets the credit cards.
    CreditCards *[]CreditCardModelType `json:"creditCards,omitempty"`
    // BankAccounts - Gets or sets the bank accounts.
    BankAccounts *[]BankAccountModelType `json:"bankAccounts,omitempty"`
    }

    // WalletRequestModelType wallet Request Model
    type WalletRequestModelType struct {
    // ReferenceID - Gets or sets the reference identifier.
    ReferenceID *string `json:"referenceId,omitempty"`
    }

