// Package  implements the Azure ARM  service API version 2.
//
//
package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/validation"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service
DefaultBaseURI = "https://api-model.softheon.com/payments")

// BaseClient is the base client for .
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // AddWalletBankAccountMethod sends the add wallet bank account request.
        // Parameters:
            // walletID - the wallet identifier.
            // request - the request.
    func (client BaseClient) AddWalletBankAccountMethod(ctx context.Context, walletID int32, request WalletBankAccountRequestModelType) (result WalletModelType, err error) {
        req, err := client.AddWalletBankAccountMethodPreparer(ctx, walletID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletBankAccountMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.AddWalletBankAccountMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletBankAccountMethod", resp, "Failure sending request")
            return
            }

            result, err = client.AddWalletBankAccountMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletBankAccountMethod", resp, "Failure responding to request")
            }

        return
        }

        // AddWalletBankAccountMethodPreparer prepares the AddWalletBankAccountMethod request.
        func (client BaseClient) AddWalletBankAccountMethodPreparer(ctx context.Context, walletID int32, request WalletBankAccountRequestModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}/BankAccount",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AddWalletBankAccountMethodSender sends the AddWalletBankAccountMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AddWalletBankAccountMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // AddWalletBankAccountMethodResponder handles the response to the AddWalletBankAccountMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) AddWalletBankAccountMethodResponder(resp *http.Response) (result WalletModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // AddWalletCreditCardMethod sends the add wallet credit card request.
        // Parameters:
            // walletID - the wallet identifier.
            // request - the request.
    func (client BaseClient) AddWalletCreditCardMethod(ctx context.Context, walletID int32, request WalletCreditCardRequestModelType) (result WalletModelType, err error) {
        req, err := client.AddWalletCreditCardMethodPreparer(ctx, walletID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletCreditCardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.AddWalletCreditCardMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletCreditCardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.AddWalletCreditCardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "AddWalletCreditCardMethod", resp, "Failure responding to request")
            }

        return
        }

        // AddWalletCreditCardMethodPreparer prepares the AddWalletCreditCardMethod request.
        func (client BaseClient) AddWalletCreditCardMethodPreparer(ctx context.Context, walletID int32, request WalletCreditCardRequestModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}/CreditCard",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // AddWalletCreditCardMethodSender sends the AddWalletCreditCardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) AddWalletCreditCardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // AddWalletCreditCardMethodResponder handles the response to the AddWalletCreditCardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) AddWalletCreditCardMethodResponder(resp *http.Response) (result WalletModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateBankAccountMethod sends the create bank account request.
        // Parameters:
            // bankAccountRequest - the bank account.
    func (client BaseClient) CreateBankAccountMethod(ctx context.Context, bankAccountRequest BankAccountRequestModelType) (result BankAccountResponseModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: bankAccountRequest,
         Constraints: []validation.Constraint{	{Target: "bankAccountRequest.AccountNumber", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.AccountNumber", Name: validation.Pattern, Rule: `\d{4,17}$`, Chain: nil },
        }},
        	{Target: "bankAccountRequest.RoutingNumber", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.RoutingNumber", Name: validation.Pattern, Rule: `\d{9,9}$`, Chain: nil },
        }},
        	{Target: "bankAccountRequest.AccountHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.AccountHolderAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "bankAccountRequest.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateBankAccountMethod", err.Error())
        }

            req, err := client.CreateBankAccountMethodPreparer(ctx, bankAccountRequest)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBankAccountMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateBankAccountMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBankAccountMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateBankAccountMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBankAccountMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateBankAccountMethodPreparer prepares the CreateBankAccountMethod request.
        func (client BaseClient) CreateBankAccountMethodPreparer(ctx context.Context, bankAccountRequest BankAccountRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/bankaccounts"),
        autorest.WithJSON(bankAccountRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateBankAccountMethodSender sends the CreateBankAccountMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateBankAccountMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateBankAccountMethodResponder handles the response to the CreateBankAccountMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateBankAccountMethodResponder(resp *http.Response) (result BankAccountResponseModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateCheckoutMethod sends the create checkout request.
        // Parameters:
            // model - the model.
    func (client BaseClient) CreateCheckoutMethod(ctx context.Context, model CheckoutRequestModelType) (result CheckoutResponseModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: model,
         Constraints: []validation.Constraint{	{Target: "model.BillingAddress", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateCheckoutMethod", err.Error())
        }

            req, err := client.CreateCheckoutMethodPreparer(ctx, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCheckoutMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateCheckoutMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCheckoutMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateCheckoutMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCheckoutMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateCheckoutMethodPreparer prepares the CreateCheckoutMethod request.
        func (client BaseClient) CreateCheckoutMethodPreparer(ctx context.Context, model CheckoutRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/checkouts"),
        autorest.WithJSON(model))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateCheckoutMethodSender sends the CreateCheckoutMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateCheckoutMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateCheckoutMethodResponder handles the response to the CreateCheckoutMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateCheckoutMethodResponder(resp *http.Response) (result CheckoutResponseModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateCreditCardMethod sends the create credit card request.
        // Parameters:
            // creditCardRequest - the new credit card.
    func (client BaseClient) CreateCreditCardMethod(ctx context.Context, creditCardRequest CreditCardRequestModelType) (result CreditCardResponseModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: creditCardRequest,
         Constraints: []validation.Constraint{	{Target: "creditCardRequest.CardNumber", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.SecurityCode", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.SecurityCode", Name: validation.Pattern, Rule: `\d{3,4}`, Chain: nil },
        }},
        	{Target: "creditCardRequest.ExpirationMonth", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.ExpirationMonth", Name: validation.InclusiveMaximum, Rule: int64(12), Chain: nil },
        	{Target: "creditCardRequest.ExpirationMonth", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "creditCardRequest.ExpirationYear", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.ExpirationYear", Name: validation.InclusiveMaximum, Rule: int64(2038), Chain: nil },
        	{Target: "creditCardRequest.ExpirationYear", Name: validation.InclusiveMinimum, Rule: 2018, Chain: nil },
        }},
        	{Target: "creditCardRequest.CardHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "creditCardRequest.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateCreditCardMethod", err.Error())
        }

            req, err := client.CreateCreditCardMethodPreparer(ctx, creditCardRequest)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCreditCardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateCreditCardMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCreditCardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateCreditCardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateCreditCardMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateCreditCardMethodPreparer prepares the CreateCreditCardMethod request.
        func (client BaseClient) CreateCreditCardMethodPreparer(ctx context.Context, creditCardRequest CreditCardRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/creditcards"),
        autorest.WithJSON(creditCardRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateCreditCardMethodSender sends the CreateCreditCardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateCreditCardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateCreditCardMethodResponder handles the response to the CreateCreditCardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateCreditCardMethodResponder(resp *http.Response) (result CreditCardResponseModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreatePaymentMethod sends the create payment request.
        // Parameters:
            // paymentRequest - the new payment.
    func (client BaseClient) CreatePaymentMethod(ctx context.Context, paymentRequest PaymentRequestModelType) (result PaymentModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: paymentRequest,
         Constraints: []validation.Constraint{	{Target: "paymentRequest.PaymentMethod", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "paymentRequest.PaymentMethod.PaymentToken", Name: validation.Null, Rule: true, Chain: nil },
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreatePaymentMethod", err.Error())
        }

            req, err := client.CreatePaymentMethodPreparer(ctx, paymentRequest)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreatePaymentMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreatePaymentMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreatePaymentMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreatePaymentMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreatePaymentMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreatePaymentMethodPreparer prepares the CreatePaymentMethod request.
        func (client BaseClient) CreatePaymentMethodPreparer(ctx context.Context, paymentRequest PaymentRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/payments"),
        autorest.WithJSON(paymentRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreatePaymentMethodSender sends the CreatePaymentMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreatePaymentMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreatePaymentMethodResponder handles the response to the CreatePaymentMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreatePaymentMethodResponder(resp *http.Response) (result PaymentModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateRefundMethod sends the create refund request.
        // Parameters:
            // ID - the identifier of the payment to be refunded.
            // refundRequestModel - the refund model.
    func (client BaseClient) CreateRefundMethod(ctx context.Context, ID int32, refundRequestModel RefundRequestModelType) (result RefundResultModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: refundRequestModel,
         Constraints: []validation.Constraint{	{Target: "refundRequestModel.Reason", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateRefundMethod", err.Error())
        }

            req, err := client.CreateRefundMethodPreparer(ctx, ID, refundRequestModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateRefundMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateRefundMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateRefundMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateRefundMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateRefundMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateRefundMethodPreparer prepares the CreateRefundMethod request.
        func (client BaseClient) CreateRefundMethodPreparer(ctx context.Context, ID int32, refundRequestModel RefundRequestModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/payments/{id}/refunds",pathParameters),
        autorest.WithJSON(refundRequestModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateRefundMethodSender sends the CreateRefundMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateRefundMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateRefundMethodResponder handles the response to the CreateRefundMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateRefundMethodResponder(resp *http.Response) (result RefundResultModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateSubscriptionMethod sends the create subscription request.
        // Parameters:
            // subscriptionRequest - the subscription request.
    func (client BaseClient) CreateSubscriptionMethod(ctx context.Context, subscriptionRequest SubscriptionRequestModelType) (result SubscriptionResponseModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: subscriptionRequest,
         Constraints: []validation.Constraint{	{Target: "subscriptionRequest.Name", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "subscriptionRequest.RunDay", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "subscriptionRequest.RunDay", Name: validation.InclusiveMaximum, Rule: int64(31), Chain: nil },
        	{Target: "subscriptionRequest.RunDay", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "subscriptionRequest.PaymentToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateSubscriptionMethod", err.Error())
        }

            req, err := client.CreateSubscriptionMethodPreparer(ctx, subscriptionRequest)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSubscriptionMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateSubscriptionMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSubscriptionMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateSubscriptionMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSubscriptionMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateSubscriptionMethodPreparer prepares the CreateSubscriptionMethod request.
        func (client BaseClient) CreateSubscriptionMethodPreparer(ctx context.Context, subscriptionRequest SubscriptionRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/subscriptions"),
        autorest.WithJSON(subscriptionRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateSubscriptionMethodSender sends the CreateSubscriptionMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateSubscriptionMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
                }

        // CreateSubscriptionMethodResponder handles the response to the CreateSubscriptionMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateSubscriptionMethodResponder(resp *http.Response) (result SubscriptionResponseModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusConflict),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateWalletMethod sends the create wallet request.
        // Parameters:
            // model - the model.
    func (client BaseClient) CreateWalletMethod(ctx context.Context, model WalletRequestModelType) (result Int32Type, err error) {
        req, err := client.CreateWalletMethodPreparer(ctx, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateWalletMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateWalletMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateWalletMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateWalletMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateWalletMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateWalletMethodPreparer prepares the CreateWalletMethod request.
        func (client BaseClient) CreateWalletMethodPreparer(ctx context.Context, model WalletRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/wallet"),
        autorest.WithJSON(model))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateWalletMethodSender sends the CreateWalletMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateWalletMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateWalletMethodResponder handles the response to the CreateWalletMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateWalletMethodResponder(resp *http.Response) (result Int32Type, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBankAccountByTokenMethod sends the get bank account by token request.
        // Parameters:
            // tokenParameter - the token.
    func (client BaseClient) GetBankAccountByTokenMethod(ctx context.Context, tokenParameter string) (result BankAccountModelType, err error) {
        req, err := client.GetBankAccountByTokenMethodPreparer(ctx, tokenParameter)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountByTokenMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBankAccountByTokenMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountByTokenMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBankAccountByTokenMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountByTokenMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBankAccountByTokenMethodPreparer prepares the GetBankAccountByTokenMethod request.
        func (client BaseClient) GetBankAccountByTokenMethodPreparer(ctx context.Context, tokenParameter string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "token": autorest.Encode("path",tokenParameter),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/bankaccounts/{token}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBankAccountByTokenMethodSender sends the GetBankAccountByTokenMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBankAccountByTokenMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBankAccountByTokenMethodResponder handles the response to the GetBankAccountByTokenMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBankAccountByTokenMethodResponder(resp *http.Response) (result BankAccountModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBankAccountsByReferenceIDMethod sends the get bank accounts by reference id request.
        // Parameters:
            // referenceID - the reference identifier.
    func (client BaseClient) GetBankAccountsByReferenceIDMethod(ctx context.Context, referenceID string) (result ListBankAccountModelType, err error) {
        req, err := client.GetBankAccountsByReferenceIDMethodPreparer(ctx, referenceID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountsByReferenceIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBankAccountsByReferenceIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountsByReferenceIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBankAccountsByReferenceIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBankAccountsByReferenceIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBankAccountsByReferenceIDMethodPreparer prepares the GetBankAccountsByReferenceIDMethod request.
        func (client BaseClient) GetBankAccountsByReferenceIDMethodPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            "referenceId": autorest.Encode("query",referenceID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/bankaccounts"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBankAccountsByReferenceIDMethodSender sends the GetBankAccountsByReferenceIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBankAccountsByReferenceIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBankAccountsByReferenceIDMethodResponder handles the response to the GetBankAccountsByReferenceIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBankAccountsByReferenceIDMethodResponder(resp *http.Response) (result ListBankAccountModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBinMethod sends the get bin request.
        // Parameters:
            // binRequest - the bin request.
    func (client BaseClient) GetBinMethod(ctx context.Context, binRequest BinRequestModelType) (result BinType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: binRequest,
         Constraints: []validation.Constraint{	{Target: "binRequest.CardNumber", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "GetBinMethod", err.Error())
        }

            req, err := client.GetBinMethodPreparer(ctx, binRequest)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBinMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBinMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBinMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBinMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBinMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBinMethodPreparer prepares the GetBinMethod request.
        func (client BaseClient) GetBinMethodPreparer(ctx context.Context, binRequest BinRequestModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/bins"),
        autorest.WithJSON(binRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBinMethodSender sends the GetBinMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBinMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBinMethodResponder handles the response to the GetBinMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBinMethodResponder(resp *http.Response) (result BinType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetCheckoutMethod sends the get checkout request.
        // Parameters:
            // checkoutID - the checkout identifier.
    func (client BaseClient) GetCheckoutMethod(ctx context.Context, checkoutID int32) (result CheckoutResponseModelType, err error) {
        req, err := client.GetCheckoutMethodPreparer(ctx, checkoutID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetCheckoutMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetCheckoutMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetCheckoutMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetCheckoutMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetCheckoutMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetCheckoutMethodPreparer prepares the GetCheckoutMethod request.
        func (client BaseClient) GetCheckoutMethodPreparer(ctx context.Context, checkoutID int32) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            "checkoutId": autorest.Encode("query",checkoutID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/checkouts"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetCheckoutMethodSender sends the GetCheckoutMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetCheckoutMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetCheckoutMethodResponder handles the response to the GetCheckoutMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetCheckoutMethodResponder(resp *http.Response) (result CheckoutResponseModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetCreditCardsByReferenceIDMethod sends the get credit cards by reference id request.
        // Parameters:
            // referenceID - the reference identifier.
    func (client BaseClient) GetCreditCardsByReferenceIDMethod(ctx context.Context, referenceID string) (result ListCreditCardModelType, err error) {
        req, err := client.GetCreditCardsByReferenceIDMethodPreparer(ctx, referenceID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetCreditCardsByReferenceIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetCreditCardsByReferenceIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetCreditCardsByReferenceIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetCreditCardsByReferenceIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetCreditCardsByReferenceIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetCreditCardsByReferenceIDMethodPreparer prepares the GetCreditCardsByReferenceIDMethod request.
        func (client BaseClient) GetCreditCardsByReferenceIDMethodPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            "referenceId": autorest.Encode("query",referenceID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/creditcards"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetCreditCardsByReferenceIDMethodSender sends the GetCreditCardsByReferenceIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetCreditCardsByReferenceIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetCreditCardsByReferenceIDMethodResponder handles the response to the GetCreditCardsByReferenceIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetCreditCardsByReferenceIDMethodResponder(resp *http.Response) (result ListCreditCardModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetPaymentMethod sends the get payment request.
        // Parameters:
            // ID - the payment identifier.
    func (client BaseClient) GetPaymentMethod(ctx context.Context, ID int32) (result PaymentModelType, err error) {
        req, err := client.GetPaymentMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetPaymentMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetPaymentMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetPaymentMethodPreparer prepares the GetPaymentMethod request.
        func (client BaseClient) GetPaymentMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/payments/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetPaymentMethodSender sends the GetPaymentMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetPaymentMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetPaymentMethodResponder handles the response to the GetPaymentMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetPaymentMethodResponder(resp *http.Response) (result PaymentModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetPaymentsByReferenceIDMethod sends the get payments by reference id request.
        // Parameters:
            // referenceID - gets or sets the reference identifier.
            // minDate - gets or sets the minimum date.
            // maxDate - gets or sets the maximum date.
    func (client BaseClient) GetPaymentsByReferenceIDMethod(ctx context.Context, referenceID string, minDate *date.Time, maxDate *date.Time) (result ListPaymentModelType, err error) {
        req, err := client.GetPaymentsByReferenceIDMethodPreparer(ctx, referenceID, minDate, maxDate)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentsByReferenceIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetPaymentsByReferenceIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentsByReferenceIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetPaymentsByReferenceIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetPaymentsByReferenceIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetPaymentsByReferenceIDMethodPreparer prepares the GetPaymentsByReferenceIDMethod request.
        func (client BaseClient) GetPaymentsByReferenceIDMethodPreparer(ctx context.Context, referenceID string, minDate *date.Time, maxDate *date.Time) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            }
                if len(referenceID) > 0 {
                queryParameters["referenceId"] = autorest.Encode("query",referenceID)
                }
                if minDate != nil {
                queryParameters["minDate"] = autorest.Encode("query",*minDate)
                }
                if maxDate != nil {
                queryParameters["maxDate"] = autorest.Encode("query",*maxDate)
                }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/payments"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetPaymentsByReferenceIDMethodSender sends the GetPaymentsByReferenceIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetPaymentsByReferenceIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetPaymentsByReferenceIDMethodResponder handles the response to the GetPaymentsByReferenceIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetPaymentsByReferenceIDMethodResponder(resp *http.Response) (result ListPaymentModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetRefundsMethod sends the get refunds request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) GetRefundsMethod(ctx context.Context, ID int32) (result ListRefundResultModelType, err error) {
        req, err := client.GetRefundsMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetRefundsMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetRefundsMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetRefundsMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetRefundsMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetRefundsMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetRefundsMethodPreparer prepares the GetRefundsMethod request.
        func (client BaseClient) GetRefundsMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/payments/{id}/refunds",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetRefundsMethodSender sends the GetRefundsMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetRefundsMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetRefundsMethodResponder handles the response to the GetRefundsMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetRefundsMethodResponder(resp *http.Response) (result ListRefundResultModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSubscriptionMethod sends the get subscription request.
        // Parameters:
            // ID - the subscription id.
    func (client BaseClient) GetSubscriptionMethod(ctx context.Context, ID string) (result SubscriptionModelType, err error) {
        req, err := client.GetSubscriptionMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSubscriptionMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSubscriptionMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSubscriptionMethodPreparer prepares the GetSubscriptionMethod request.
        func (client BaseClient) GetSubscriptionMethodPreparer(ctx context.Context, ID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/subscriptions/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSubscriptionMethodSender sends the GetSubscriptionMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSubscriptionMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
                }

        // GetSubscriptionMethodResponder handles the response to the GetSubscriptionMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSubscriptionMethodResponder(resp *http.Response) (result SubscriptionModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSubscriptionsByReferenceIDMethod sends the get subscriptions by reference id request.
        // Parameters:
            // referenceID - the reference identifier.
    func (client BaseClient) GetSubscriptionsByReferenceIDMethod(ctx context.Context, referenceID string) (result ListSubscriptionModelType, err error) {
        req, err := client.GetSubscriptionsByReferenceIDMethodPreparer(ctx, referenceID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionsByReferenceIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSubscriptionsByReferenceIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionsByReferenceIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSubscriptionsByReferenceIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSubscriptionsByReferenceIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSubscriptionsByReferenceIDMethodPreparer prepares the GetSubscriptionsByReferenceIDMethod request.
        func (client BaseClient) GetSubscriptionsByReferenceIDMethodPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            "referenceId": autorest.Encode("query",referenceID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/subscriptions"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSubscriptionsByReferenceIDMethodSender sends the GetSubscriptionsByReferenceIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSubscriptionsByReferenceIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
                }

        // GetSubscriptionsByReferenceIDMethodResponder handles the response to the GetSubscriptionsByReferenceIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSubscriptionsByReferenceIDMethodResponder(resp *http.Response) (result ListSubscriptionModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetWalletByReferenceIDMethod sends the get wallet by reference id request.
        // Parameters:
            // referenceID - the reference identifier.
    func (client BaseClient) GetWalletByReferenceIDMethod(ctx context.Context, referenceID string) (result WalletModelType, err error) {
        req, err := client.GetWalletByReferenceIDMethodPreparer(ctx, referenceID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletByReferenceIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetWalletByReferenceIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletByReferenceIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetWalletByReferenceIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletByReferenceIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetWalletByReferenceIDMethodPreparer prepares the GetWalletByReferenceIDMethod request.
        func (client BaseClient) GetWalletByReferenceIDMethodPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
                    queryParameters := map[string]interface{} {
            "referenceId": autorest.Encode("query",referenceID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/wallet"),
        autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetWalletByReferenceIDMethodSender sends the GetWalletByReferenceIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetWalletByReferenceIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetWalletByReferenceIDMethodResponder handles the response to the GetWalletByReferenceIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetWalletByReferenceIDMethodResponder(resp *http.Response) (result WalletModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetWalletMethod sends the get wallet request.
        // Parameters:
            // walletID - the wallet identifier.
    func (client BaseClient) GetWalletMethod(ctx context.Context, walletID int32) (result WalletModelType, err error) {
        req, err := client.GetWalletMethodPreparer(ctx, walletID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetWalletMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetWalletMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetWalletMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetWalletMethodPreparer prepares the GetWalletMethod request.
        func (client BaseClient) GetWalletMethodPreparer(ctx context.Context, walletID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetWalletMethodSender sends the GetWalletMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetWalletMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetWalletMethodResponder handles the response to the GetWalletMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetWalletMethodResponder(resp *http.Response) (result WalletModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // RemoveWalletBankAccountMethod sends the remove wallet bank account request.
        // Parameters:
            // walletID - the wallet identifier.
            // walletBankAcctID - the wallet bank acct identifier.
    func (client BaseClient) RemoveWalletBankAccountMethod(ctx context.Context, walletID int32, walletBankAcctID int32) (result autorest.Response, err error) {
        req, err := client.RemoveWalletBankAccountMethodPreparer(ctx, walletID, walletBankAcctID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletBankAccountMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.RemoveWalletBankAccountMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletBankAccountMethod", resp, "Failure sending request")
            return
            }

            result, err = client.RemoveWalletBankAccountMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletBankAccountMethod", resp, "Failure responding to request")
            }

        return
        }

        // RemoveWalletBankAccountMethodPreparer prepares the RemoveWalletBankAccountMethod request.
        func (client BaseClient) RemoveWalletBankAccountMethodPreparer(ctx context.Context, walletID int32, walletBankAcctID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletBankAcctId": autorest.Encode("path",walletBankAcctID),
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsDelete(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}/BankAccount/{walletBankAcctId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // RemoveWalletBankAccountMethodSender sends the RemoveWalletBankAccountMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) RemoveWalletBankAccountMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // RemoveWalletBankAccountMethodResponder handles the response to the RemoveWalletBankAccountMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) RemoveWalletBankAccountMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // RemoveWalletCreditCardMethod sends the remove wallet credit card request.
        // Parameters:
            // walletID - the wallet identifier.
            // walletCreditCardID - the wallet credit card identifier.
    func (client BaseClient) RemoveWalletCreditCardMethod(ctx context.Context, walletID int32, walletCreditCardID int32) (result autorest.Response, err error) {
        req, err := client.RemoveWalletCreditCardMethodPreparer(ctx, walletID, walletCreditCardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletCreditCardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.RemoveWalletCreditCardMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletCreditCardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.RemoveWalletCreditCardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "RemoveWalletCreditCardMethod", resp, "Failure responding to request")
            }

        return
        }

        // RemoveWalletCreditCardMethodPreparer prepares the RemoveWalletCreditCardMethod request.
        func (client BaseClient) RemoveWalletCreditCardMethodPreparer(ctx context.Context, walletID int32, walletCreditCardID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletCreditCardId": autorest.Encode("path",walletCreditCardID),
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsDelete(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}/CreditCard/{walletCreditCardId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // RemoveWalletCreditCardMethodSender sends the RemoveWalletCreditCardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) RemoveWalletCreditCardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // RemoveWalletCreditCardMethodResponder handles the response to the RemoveWalletCreditCardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) RemoveWalletCreditCardMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateBankAccountMethod sends the update bank account request.
        // Parameters:
            // updateBankAccountModel - the update bank account model.
    func (client BaseClient) UpdateBankAccountMethod(ctx context.Context, updateBankAccountModel UpdateBankAccountModelType) (result autorest.Response, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateBankAccountModel,
         Constraints: []validation.Constraint{	{Target: "updateBankAccountModel.AccountHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateBankAccountModel.AccountHolderAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "updateBankAccountModel.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "UpdateBankAccountMethod", err.Error())
        }

            req, err := client.UpdateBankAccountMethodPreparer(ctx, updateBankAccountModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBankAccountMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateBankAccountMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBankAccountMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateBankAccountMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBankAccountMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateBankAccountMethodPreparer prepares the UpdateBankAccountMethod request.
        func (client BaseClient) UpdateBankAccountMethodPreparer(ctx context.Context, updateBankAccountModel UpdateBankAccountModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/bankaccounts"),
        autorest.WithJSON(updateBankAccountModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateBankAccountMethodSender sends the UpdateBankAccountMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateBankAccountMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // UpdateBankAccountMethodResponder handles the response to the UpdateBankAccountMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateBankAccountMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateCreditCardMethod sends the update credit card request.
        // Parameters:
            // updateCreditCardModel - the update credit card model.
    func (client BaseClient) UpdateCreditCardMethod(ctx context.Context, updateCreditCardModel UpdateCreditCardModelType) (result autorest.Response, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateCreditCardModel,
         Constraints: []validation.Constraint{	{Target: "updateCreditCardModel.Token", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.InclusiveMaximum, Rule: int64(12), Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.InclusiveMaximum, Rule: int64(2038), Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.InclusiveMinimum, Rule: 2018, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.CardHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "UpdateCreditCardMethod", err.Error())
        }

            req, err := client.UpdateCreditCardMethodPreparer(ctx, updateCreditCardModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateCreditCardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateCreditCardMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateCreditCardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateCreditCardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateCreditCardMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateCreditCardMethodPreparer prepares the UpdateCreditCardMethod request.
        func (client BaseClient) UpdateCreditCardMethodPreparer(ctx context.Context, updateCreditCardModel UpdateCreditCardModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/creditcards"),
        autorest.WithJSON(updateCreditCardModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateCreditCardMethodSender sends the UpdateCreditCardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateCreditCardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // UpdateCreditCardMethodResponder handles the response to the UpdateCreditCardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateCreditCardMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateSubscriptionMethod sends the update subscription request.
        // Parameters:
            // updateSubscriptionModel - the update subscription model.
    func (client BaseClient) UpdateSubscriptionMethod(ctx context.Context, updateSubscriptionModel UpdateSubscriptionModelType) (result autorest.Response, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateSubscriptionModel,
         Constraints: []validation.Constraint{	{Target: "updateSubscriptionModel.ID", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateSubscriptionModel.Name", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateSubscriptionModel.RunDay", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateSubscriptionModel.RunDay", Name: validation.InclusiveMaximum, Rule: int64(31), Chain: nil },
        	{Target: "updateSubscriptionModel.RunDay", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "updateSubscriptionModel.PaymentToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
        return result, validation.NewError(".BaseClient", "UpdateSubscriptionMethod", err.Error())
        }

            req, err := client.UpdateSubscriptionMethodPreparer(ctx, updateSubscriptionModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSubscriptionMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateSubscriptionMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSubscriptionMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateSubscriptionMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSubscriptionMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateSubscriptionMethodPreparer prepares the UpdateSubscriptionMethod request.
        func (client BaseClient) UpdateSubscriptionMethodPreparer(ctx context.Context, updateSubscriptionModel UpdateSubscriptionModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/subscriptions"),
        autorest.WithJSON(updateSubscriptionModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateSubscriptionMethodSender sends the UpdateSubscriptionMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateSubscriptionMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
                }

        // UpdateSubscriptionMethodResponder handles the response to the UpdateSubscriptionMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateSubscriptionMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateWalletMethod sends the update wallet request.
        // Parameters:
            // walletID - the wallet identifier.
            // defaultPaymentToken - the default payment token.
    func (client BaseClient) UpdateWalletMethod(ctx context.Context, walletID int32, defaultPaymentToken string) (result autorest.Response, err error) {
        req, err := client.UpdateWalletMethodPreparer(ctx, walletID, defaultPaymentToken)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateWalletMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateWalletMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateWalletMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateWalletMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateWalletMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateWalletMethodPreparer prepares the UpdateWalletMethod request.
        func (client BaseClient) UpdateWalletMethodPreparer(ctx context.Context, walletID int32, defaultPaymentToken string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "walletId": autorest.Encode("path",walletID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/wallet/{walletId}",pathParameters),
        autorest.WithJSON(defaultPaymentToken))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateWalletMethodSender sends the UpdateWalletMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateWalletMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // UpdateWalletMethodResponder handles the response to the UpdateWalletMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateWalletMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized),
            autorest.ByClosing())
            result.Response = resp
                return
        }

