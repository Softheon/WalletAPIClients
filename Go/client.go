// Package softheonwalletapiclient implements the Azure ARM Softheonwalletapiclient service API version v1.
//
//
package softheonwalletapiclient

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/validation"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service Softheonwalletapiclient
DefaultBaseURI = "https://hack.softheon.io/api/payments")

// BaseClient is the base client for Softheonwalletapiclient.
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // AddWalletBankAccount sends the add wallet bank account request.
    //
    // walletID is the wallet identifier. request is the request.
    func (client BaseClient) AddWalletBankAccount(ctx context.Context, walletID int32, request WalletBankAccountRequestModel) (result WalletModel, err error) {
        req, err := client.AddWalletBankAccountPreparer(ctx, walletID, request)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletBankAccount", nil , "Failure preparing request")
            return
        }

        resp, err := client.AddWalletBankAccountSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletBankAccount", resp, "Failure sending request")
            return
        }

        result, err = client.AddWalletBankAccountResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletBankAccount", resp, "Failure responding to request")
        }

        return
    }

    // AddWalletBankAccountPreparer prepares the AddWalletBankAccount request.
    func (client BaseClient) AddWalletBankAccountPreparer(ctx context.Context, walletID int32, request WalletBankAccountRequestModel) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}/BankAccount",pathParameters),
            autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AddWalletBankAccountSender sends the AddWalletBankAccount request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) AddWalletBankAccountSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // AddWalletBankAccountResponder handles the response to the AddWalletBankAccount request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AddWalletBankAccountResponder(resp *http.Response) (result WalletModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // AddWalletCreditCard sends the add wallet credit card request.
    //
    // walletID is the wallet identifier. request is the request.
    func (client BaseClient) AddWalletCreditCard(ctx context.Context, walletID int32, request WalletCreditCardRequestModel) (result WalletModel, err error) {
        req, err := client.AddWalletCreditCardPreparer(ctx, walletID, request)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletCreditCard", nil , "Failure preparing request")
            return
        }

        resp, err := client.AddWalletCreditCardSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletCreditCard", resp, "Failure sending request")
            return
        }

        result, err = client.AddWalletCreditCardResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "AddWalletCreditCard", resp, "Failure responding to request")
        }

        return
    }

    // AddWalletCreditCardPreparer prepares the AddWalletCreditCard request.
    func (client BaseClient) AddWalletCreditCardPreparer(ctx context.Context, walletID int32, request WalletCreditCardRequestModel) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}/CreditCard",pathParameters),
            autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // AddWalletCreditCardSender sends the AddWalletCreditCard request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) AddWalletCreditCardSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // AddWalletCreditCardResponder handles the response to the AddWalletCreditCard request. The method always
    // closes the http.Response Body.
    func (client BaseClient) AddWalletCreditCardResponder(resp *http.Response) (result WalletModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateBankAccount sends the create bank account request.
    //
    // bankAccountRequest is the bank account.
    func (client BaseClient) CreateBankAccount(ctx context.Context, bankAccountRequest BankAccountRequestModel) (result BankAccountResponseModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: bankAccountRequest,
         Constraints: []validation.Constraint{	{Target: "bankAccountRequest.AccountNumber", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.AccountNumber", Name: validation.Pattern, Rule: `\d{4,17}$`, Chain: nil },
        }},
        	{Target: "bankAccountRequest.RoutingNumber", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.RoutingNumber", Name: validation.Pattern, Rule: `\d{9,9}$`, Chain: nil },
        }},
        	{Target: "bankAccountRequest.AccountHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "bankAccountRequest.AccountHolderAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "bankAccountRequest.AccountHolderAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "bankAccountRequest.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreateBankAccount")
        }

        req, err := client.CreateBankAccountPreparer(ctx, bankAccountRequest)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateBankAccount", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateBankAccountSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateBankAccount", resp, "Failure sending request")
            return
        }

        result, err = client.CreateBankAccountResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateBankAccount", resp, "Failure responding to request")
        }

        return
    }

    // CreateBankAccountPreparer prepares the CreateBankAccount request.
    func (client BaseClient) CreateBankAccountPreparer(ctx context.Context, bankAccountRequest BankAccountRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/bankaccounts"),
            autorest.WithJSON(bankAccountRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateBankAccountSender sends the CreateBankAccount request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateBankAccountSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreateBankAccountResponder handles the response to the CreateBankAccount request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateBankAccountResponder(resp *http.Response) (result BankAccountResponseModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateCheckout sends the create checkout request.
    //
    // model is the model.
    func (client BaseClient) CreateCheckout(ctx context.Context, model CheckoutRequestModel) (result CheckoutResponseModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: model,
         Constraints: []validation.Constraint{	{Target: "model.BillingAddress", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "model.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }}}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreateCheckout")
        }

        req, err := client.CreateCheckoutPreparer(ctx, model)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCheckout", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateCheckoutSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCheckout", resp, "Failure sending request")
            return
        }

        result, err = client.CreateCheckoutResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCheckout", resp, "Failure responding to request")
        }

        return
    }

    // CreateCheckoutPreparer prepares the CreateCheckout request.
    func (client BaseClient) CreateCheckoutPreparer(ctx context.Context, model CheckoutRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/checkouts"),
            autorest.WithJSON(model))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateCheckoutSender sends the CreateCheckout request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateCheckoutSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreateCheckoutResponder handles the response to the CreateCheckout request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateCheckoutResponder(resp *http.Response) (result CheckoutResponseModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateCreditCard sends the create credit card request.
    //
    // creditCardRequest is the new credit card.
    func (client BaseClient) CreateCreditCard(ctx context.Context, creditCardRequest CreditCardRequestModel) (result CreditCardResponseModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: creditCardRequest,
         Constraints: []validation.Constraint{	{Target: "creditCardRequest.CardNumber", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.SecurityCode", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.SecurityCode", Name: validation.Pattern, Rule: `\d{3,4}`, Chain: nil },
        }},
        	{Target: "creditCardRequest.ExpirationMonth", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.ExpirationMonth", Name: validation.InclusiveMaximum, Rule: 12, Chain: nil },
        	{Target: "creditCardRequest.ExpirationMonth", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "creditCardRequest.ExpirationYear", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.ExpirationYear", Name: validation.InclusiveMaximum, Rule: 2038, Chain: nil },
        	{Target: "creditCardRequest.ExpirationYear", Name: validation.InclusiveMinimum, Rule: 2018, Chain: nil },
        }},
        	{Target: "creditCardRequest.CardHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "creditCardRequest.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "creditCardRequest.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "creditCardRequest.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreateCreditCard")
        }

        req, err := client.CreateCreditCardPreparer(ctx, creditCardRequest)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCreditCard", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateCreditCardSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCreditCard", resp, "Failure sending request")
            return
        }

        result, err = client.CreateCreditCardResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateCreditCard", resp, "Failure responding to request")
        }

        return
    }

    // CreateCreditCardPreparer prepares the CreateCreditCard request.
    func (client BaseClient) CreateCreditCardPreparer(ctx context.Context, creditCardRequest CreditCardRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/creditcards"),
            autorest.WithJSON(creditCardRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateCreditCardSender sends the CreateCreditCard request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateCreditCardSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreateCreditCardResponder handles the response to the CreateCreditCard request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateCreditCardResponder(resp *http.Response) (result CreditCardResponseModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreatePayment sends the create payment request.
    //
    // paymentRequest is the new payment.
    func (client BaseClient) CreatePayment(ctx context.Context, paymentRequest PaymentRequestModel) (result PaymentModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: paymentRequest,
         Constraints: []validation.Constraint{	{Target: "paymentRequest.PaymentMethod", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "paymentRequest.PaymentMethod.PaymentToken", Name: validation.Null, Rule: true, Chain: nil },
        }}}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreatePayment")
        }

        req, err := client.CreatePaymentPreparer(ctx, paymentRequest)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreatePayment", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreatePaymentSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreatePayment", resp, "Failure sending request")
            return
        }

        result, err = client.CreatePaymentResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreatePayment", resp, "Failure responding to request")
        }

        return
    }

    // CreatePaymentPreparer prepares the CreatePayment request.
    func (client BaseClient) CreatePaymentPreparer(ctx context.Context, paymentRequest PaymentRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/payments"),
            autorest.WithJSON(paymentRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreatePaymentSender sends the CreatePayment request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreatePaymentSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreatePaymentResponder handles the response to the CreatePayment request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreatePaymentResponder(resp *http.Response) (result PaymentModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateRefund sends the create refund request.
    //
    // ID is the identifier of the payment to be refunded. refundRequestModel is the refund model.
    func (client BaseClient) CreateRefund(ctx context.Context, ID int32, refundRequestModel RefundRequestModel) (result RefundResultModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: refundRequestModel,
         Constraints: []validation.Constraint{	{Target: "refundRequestModel.Reason", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreateRefund")
        }

        req, err := client.CreateRefundPreparer(ctx, ID, refundRequestModel)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateRefund", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateRefundSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateRefund", resp, "Failure sending request")
            return
        }

        result, err = client.CreateRefundResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateRefund", resp, "Failure responding to request")
        }

        return
    }

    // CreateRefundPreparer prepares the CreateRefund request.
    func (client BaseClient) CreateRefundPreparer(ctx context.Context, ID int32, refundRequestModel RefundRequestModel) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/payments/{id}/refunds",pathParameters),
            autorest.WithJSON(refundRequestModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateRefundSender sends the CreateRefund request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateRefundSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreateRefundResponder handles the response to the CreateRefund request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateRefundResponder(resp *http.Response) (result RefundResultModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateSubscription sends the create subscription request.
    //
    // subscriptionRequest is the subscription request.
    func (client BaseClient) CreateSubscription(ctx context.Context, subscriptionRequest SubscriptionRequestModel) (result SubscriptionResponceModel, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: subscriptionRequest,
         Constraints: []validation.Constraint{	{Target: "subscriptionRequest.Name", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "subscriptionRequest.RunDay", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "subscriptionRequest.RunDay", Name: validation.InclusiveMaximum, Rule: 31, Chain: nil },
        	{Target: "subscriptionRequest.RunDay", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "subscriptionRequest.PaymentToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","CreateSubscription")
        }

        req, err := client.CreateSubscriptionPreparer(ctx, subscriptionRequest)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateSubscription", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateSubscriptionSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateSubscription", resp, "Failure sending request")
            return
        }

        result, err = client.CreateSubscriptionResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateSubscription", resp, "Failure responding to request")
        }

        return
    }

    // CreateSubscriptionPreparer prepares the CreateSubscription request.
    func (client BaseClient) CreateSubscriptionPreparer(ctx context.Context, subscriptionRequest SubscriptionRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/subscriptions"),
            autorest.WithJSON(subscriptionRequest))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateSubscriptionSender sends the CreateSubscription request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateSubscriptionSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
    }

    // CreateSubscriptionResponder handles the response to the CreateSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateSubscriptionResponder(resp *http.Response) (result SubscriptionResponceModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusConflict),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // CreateWallet sends the create wallet request.
    //
    // model is the model.
    func (client BaseClient) CreateWallet(ctx context.Context, model WalletRequestModel) (result autorest.Response, err error) {
        req, err := client.CreateWalletPreparer(ctx, model)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateWallet", nil , "Failure preparing request")
            return
        }

        resp, err := client.CreateWalletSender(req)
        if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateWallet", resp, "Failure sending request")
            return
        }

        result, err = client.CreateWalletResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "CreateWallet", resp, "Failure responding to request")
        }

        return
    }

    // CreateWalletPreparer prepares the CreateWallet request.
    func (client BaseClient) CreateWalletPreparer(ctx context.Context, model WalletRequestModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPost(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/wallet"),
            autorest.WithJSON(model))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // CreateWalletSender sends the CreateWallet request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) CreateWalletSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // CreateWalletResponder handles the response to the CreateWallet request. The method always
    // closes the http.Response Body.
    func (client BaseClient) CreateWalletResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByClosing())
        result.Response = resp
        return
    }

    // GetBankAccountByToken sends the get bank account by token request.
    //
    // tokenParameter is the token.
    func (client BaseClient) GetBankAccountByToken(ctx context.Context, tokenParameter string) (result BankAccountModel, err error) {
        req, err := client.GetBankAccountByTokenPreparer(ctx, tokenParameter)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountByToken", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetBankAccountByTokenSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountByToken", resp, "Failure sending request")
            return
        }

        result, err = client.GetBankAccountByTokenResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountByToken", resp, "Failure responding to request")
        }

        return
    }

    // GetBankAccountByTokenPreparer prepares the GetBankAccountByToken request.
    func (client BaseClient) GetBankAccountByTokenPreparer(ctx context.Context, tokenParameter string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "token": autorest.Encode("path",tokenParameter),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/bankaccounts/{token}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetBankAccountByTokenSender sends the GetBankAccountByToken request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetBankAccountByTokenSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetBankAccountByTokenResponder handles the response to the GetBankAccountByToken request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetBankAccountByTokenResponder(resp *http.Response) (result BankAccountModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetBankAccountsByReferenceID sends the get bank accounts by reference id request.
    //
    // referenceID is the reference identifier.
    func (client BaseClient) GetBankAccountsByReferenceID(ctx context.Context, referenceID string) (result ListBankAccountModel, err error) {
        req, err := client.GetBankAccountsByReferenceIDPreparer(ctx, referenceID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountsByReferenceID", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetBankAccountsByReferenceIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountsByReferenceID", resp, "Failure sending request")
            return
        }

        result, err = client.GetBankAccountsByReferenceIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBankAccountsByReferenceID", resp, "Failure responding to request")
        }

        return
    }

    // GetBankAccountsByReferenceIDPreparer prepares the GetBankAccountsByReferenceID request.
    func (client BaseClient) GetBankAccountsByReferenceIDPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "referenceId": autorest.Encode("query",referenceID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/bankaccounts"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetBankAccountsByReferenceIDSender sends the GetBankAccountsByReferenceID request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetBankAccountsByReferenceIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetBankAccountsByReferenceIDResponder handles the response to the GetBankAccountsByReferenceID request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetBankAccountsByReferenceIDResponder(resp *http.Response) (result ListBankAccountModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetBin sends the get bin request.
    //
    // cardNumber is the card number.
    func (client BaseClient) GetBin(ctx context.Context, cardNumber string) (result Bin, err error) {
        req, err := client.GetBinPreparer(ctx, cardNumber)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBin", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetBinSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBin", resp, "Failure sending request")
            return
        }

        result, err = client.GetBinResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetBin", resp, "Failure responding to request")
        }

        return
    }

    // GetBinPreparer prepares the GetBin request.
    func (client BaseClient) GetBinPreparer(ctx context.Context, cardNumber string) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "cardNumber": autorest.Encode("query",cardNumber),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/bins"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetBinSender sends the GetBin request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetBinSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetBinResponder handles the response to the GetBin request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetBinResponder(resp *http.Response) (result Bin, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetCheckout sends the get checkout request.
    //
    // checkoutID is the checkout identifier.
    func (client BaseClient) GetCheckout(ctx context.Context, checkoutID int32) (result CheckoutResponseModel, err error) {
        req, err := client.GetCheckoutPreparer(ctx, checkoutID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCheckout", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetCheckoutSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCheckout", resp, "Failure sending request")
            return
        }

        result, err = client.GetCheckoutResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCheckout", resp, "Failure responding to request")
        }

        return
    }

    // GetCheckoutPreparer prepares the GetCheckout request.
    func (client BaseClient) GetCheckoutPreparer(ctx context.Context, checkoutID int32) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "checkoutId": autorest.Encode("query",checkoutID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/checkouts"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCheckoutSender sends the GetCheckout request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetCheckoutSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetCheckoutResponder handles the response to the GetCheckout request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetCheckoutResponder(resp *http.Response) (result CheckoutResponseModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetCreditCardsByReferenceID sends the get credit cards by reference id request.
    //
    // referenceID is the reference identifier.
    func (client BaseClient) GetCreditCardsByReferenceID(ctx context.Context, referenceID string) (result ListCreditCardModel, err error) {
        req, err := client.GetCreditCardsByReferenceIDPreparer(ctx, referenceID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCreditCardsByReferenceID", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetCreditCardsByReferenceIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCreditCardsByReferenceID", resp, "Failure sending request")
            return
        }

        result, err = client.GetCreditCardsByReferenceIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetCreditCardsByReferenceID", resp, "Failure responding to request")
        }

        return
    }

    // GetCreditCardsByReferenceIDPreparer prepares the GetCreditCardsByReferenceID request.
    func (client BaseClient) GetCreditCardsByReferenceIDPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "referenceId": autorest.Encode("query",referenceID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/creditcards"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetCreditCardsByReferenceIDSender sends the GetCreditCardsByReferenceID request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetCreditCardsByReferenceIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetCreditCardsByReferenceIDResponder handles the response to the GetCreditCardsByReferenceID request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetCreditCardsByReferenceIDResponder(resp *http.Response) (result ListCreditCardModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetPayment sends the get payment request.
    //
    // ID is the payment identifier.
    func (client BaseClient) GetPayment(ctx context.Context, ID int32) (result PaymentModel, err error) {
        req, err := client.GetPaymentPreparer(ctx, ID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPayment", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetPaymentSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPayment", resp, "Failure sending request")
            return
        }

        result, err = client.GetPaymentResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPayment", resp, "Failure responding to request")
        }

        return
    }

    // GetPaymentPreparer prepares the GetPayment request.
    func (client BaseClient) GetPaymentPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/payments/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetPaymentSender sends the GetPayment request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetPaymentSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetPaymentResponder handles the response to the GetPayment request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetPaymentResponder(resp *http.Response) (result PaymentModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetPaymentsByReferenceID sends the get payments by reference id request.
    //
    // referenceID is the client application provided reference ID for the payment. minDate is the optional lower bound of
    // the range for payment date. maxDate is the optional upper bound of the range for payment date.
    func (client BaseClient) GetPaymentsByReferenceID(ctx context.Context, referenceID string, minDate *date.Time, maxDate *date.Time) (result ListPaymentModel, err error) {
        req, err := client.GetPaymentsByReferenceIDPreparer(ctx, referenceID, minDate, maxDate)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPaymentsByReferenceID", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetPaymentsByReferenceIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPaymentsByReferenceID", resp, "Failure sending request")
            return
        }

        result, err = client.GetPaymentsByReferenceIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetPaymentsByReferenceID", resp, "Failure responding to request")
        }

        return
    }

    // GetPaymentsByReferenceIDPreparer prepares the GetPaymentsByReferenceID request.
    func (client BaseClient) GetPaymentsByReferenceIDPreparer(ctx context.Context, referenceID string, minDate *date.Time, maxDate *date.Time) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "referenceId": autorest.Encode("query",referenceID),
        }
        if minDate != nil {
            queryParameters["minDate"] = autorest.Encode("query",*minDate)
        }
        if maxDate != nil {
            queryParameters["maxDate"] = autorest.Encode("query",*maxDate)
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/payments"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetPaymentsByReferenceIDSender sends the GetPaymentsByReferenceID request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetPaymentsByReferenceIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetPaymentsByReferenceIDResponder handles the response to the GetPaymentsByReferenceID request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetPaymentsByReferenceIDResponder(resp *http.Response) (result ListPaymentModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetRefunds sends the get refunds request.
    //
    // ID is the identifier.
    func (client BaseClient) GetRefunds(ctx context.Context, ID int32) (result ListRefundResultModel, err error) {
        req, err := client.GetRefundsPreparer(ctx, ID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetRefunds", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetRefundsSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetRefunds", resp, "Failure sending request")
            return
        }

        result, err = client.GetRefundsResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetRefunds", resp, "Failure responding to request")
        }

        return
    }

    // GetRefundsPreparer prepares the GetRefunds request.
    func (client BaseClient) GetRefundsPreparer(ctx context.Context, ID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/payments/{id}/refunds",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetRefundsSender sends the GetRefunds request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetRefundsSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetRefundsResponder handles the response to the GetRefunds request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetRefundsResponder(resp *http.Response) (result ListRefundResultModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetSubscription sends the get subscription request.
    //
    // ID is the subscription id.
    func (client BaseClient) GetSubscription(ctx context.Context, ID string) (result SubscriptionModel, err error) {
        req, err := client.GetSubscriptionPreparer(ctx, ID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscription", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetSubscriptionSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscription", resp, "Failure sending request")
            return
        }

        result, err = client.GetSubscriptionResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscription", resp, "Failure responding to request")
        }

        return
    }

    // GetSubscriptionPreparer prepares the GetSubscription request.
    func (client BaseClient) GetSubscriptionPreparer(ctx context.Context, ID string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "id": autorest.Encode("path",ID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/subscriptions/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSubscriptionSender sends the GetSubscription request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetSubscriptionSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
    }

    // GetSubscriptionResponder handles the response to the GetSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetSubscriptionResponder(resp *http.Response) (result SubscriptionModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetSubscriptionsByReferenceID sends the get subscriptions by reference id request.
    //
    // referenceID is the reference identifier.
    func (client BaseClient) GetSubscriptionsByReferenceID(ctx context.Context, referenceID string) (result ListSubscriptionModel, err error) {
        req, err := client.GetSubscriptionsByReferenceIDPreparer(ctx, referenceID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscriptionsByReferenceID", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetSubscriptionsByReferenceIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscriptionsByReferenceID", resp, "Failure sending request")
            return
        }

        result, err = client.GetSubscriptionsByReferenceIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetSubscriptionsByReferenceID", resp, "Failure responding to request")
        }

        return
    }

    // GetSubscriptionsByReferenceIDPreparer prepares the GetSubscriptionsByReferenceID request.
    func (client BaseClient) GetSubscriptionsByReferenceIDPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "referenceId": autorest.Encode("query",referenceID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/subscriptions"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetSubscriptionsByReferenceIDSender sends the GetSubscriptionsByReferenceID request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetSubscriptionsByReferenceIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
    }

    // GetSubscriptionsByReferenceIDResponder handles the response to the GetSubscriptionsByReferenceID request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetSubscriptionsByReferenceIDResponder(resp *http.Response) (result ListSubscriptionModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetWallet sends the get wallet request.
    //
    // walletID is the wallet identifier.
    func (client BaseClient) GetWallet(ctx context.Context, walletID int32) (result WalletModel, err error) {
        req, err := client.GetWalletPreparer(ctx, walletID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWallet", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetWalletSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWallet", resp, "Failure sending request")
            return
        }

        result, err = client.GetWalletResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWallet", resp, "Failure responding to request")
        }

        return
    }

    // GetWalletPreparer prepares the GetWallet request.
    func (client BaseClient) GetWalletPreparer(ctx context.Context, walletID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetWalletSender sends the GetWallet request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetWalletSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetWalletResponder handles the response to the GetWallet request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetWalletResponder(resp *http.Response) (result WalletModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // GetWalletByReferenceID sends the get wallet by reference id request.
    //
    // referenceID is the reference identifier.
    func (client BaseClient) GetWalletByReferenceID(ctx context.Context, referenceID string) (result WalletModel, err error) {
        req, err := client.GetWalletByReferenceIDPreparer(ctx, referenceID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWalletByReferenceID", nil , "Failure preparing request")
            return
        }

        resp, err := client.GetWalletByReferenceIDSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWalletByReferenceID", resp, "Failure sending request")
            return
        }

        result, err = client.GetWalletByReferenceIDResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "GetWalletByReferenceID", resp, "Failure responding to request")
        }

        return
    }

    // GetWalletByReferenceIDPreparer prepares the GetWalletByReferenceID request.
    func (client BaseClient) GetWalletByReferenceIDPreparer(ctx context.Context, referenceID string) (*http.Request, error) {
        queryParameters := map[string]interface{} {
        "referenceId": autorest.Encode("query",referenceID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsGet(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/wallet"),
            autorest.WithQueryParameters(queryParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // GetWalletByReferenceIDSender sends the GetWalletByReferenceID request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) GetWalletByReferenceIDSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // GetWalletByReferenceIDResponder handles the response to the GetWalletByReferenceID request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetWalletByReferenceIDResponder(resp *http.Response) (result WalletModel, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // RemoveWalletBankAccount sends the remove wallet bank account request.
    //
    // walletID is the wallet identifier. walletBankAcctID is the wallet bank acct identifier.
    func (client BaseClient) RemoveWalletBankAccount(ctx context.Context, walletID int32, walletBankAcctID int32) (result autorest.Response, err error) {
        req, err := client.RemoveWalletBankAccountPreparer(ctx, walletID, walletBankAcctID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletBankAccount", nil , "Failure preparing request")
            return
        }

        resp, err := client.RemoveWalletBankAccountSender(req)
        if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletBankAccount", resp, "Failure sending request")
            return
        }

        result, err = client.RemoveWalletBankAccountResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletBankAccount", resp, "Failure responding to request")
        }

        return
    }

    // RemoveWalletBankAccountPreparer prepares the RemoveWalletBankAccount request.
    func (client BaseClient) RemoveWalletBankAccountPreparer(ctx context.Context, walletID int32, walletBankAcctID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletBankAcctId": autorest.Encode("path",walletBankAcctID),
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsDelete(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}/BankAccount/{walletBankAcctId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // RemoveWalletBankAccountSender sends the RemoveWalletBankAccount request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) RemoveWalletBankAccountSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // RemoveWalletBankAccountResponder handles the response to the RemoveWalletBankAccount request. The method always
    // closes the http.Response Body.
    func (client BaseClient) RemoveWalletBankAccountResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByClosing())
        result.Response = resp
        return
    }

    // RemoveWalletCreditCard sends the remove wallet credit card request.
    //
    // walletID is the wallet identifier. walletCreditCardID is the wallet credit card identifier.
    func (client BaseClient) RemoveWalletCreditCard(ctx context.Context, walletID int32, walletCreditCardID int32) (result autorest.Response, err error) {
        req, err := client.RemoveWalletCreditCardPreparer(ctx, walletID, walletCreditCardID)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletCreditCard", nil , "Failure preparing request")
            return
        }

        resp, err := client.RemoveWalletCreditCardSender(req)
        if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletCreditCard", resp, "Failure sending request")
            return
        }

        result, err = client.RemoveWalletCreditCardResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "RemoveWalletCreditCard", resp, "Failure responding to request")
        }

        return
    }

    // RemoveWalletCreditCardPreparer prepares the RemoveWalletCreditCard request.
    func (client BaseClient) RemoveWalletCreditCardPreparer(ctx context.Context, walletID int32, walletCreditCardID int32) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletCreditCardId": autorest.Encode("path",walletCreditCardID),
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsDelete(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}/CreditCard/{walletCreditCardId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // RemoveWalletCreditCardSender sends the RemoveWalletCreditCard request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) RemoveWalletCreditCardSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // RemoveWalletCreditCardResponder handles the response to the RemoveWalletCreditCard request. The method always
    // closes the http.Response Body.
    func (client BaseClient) RemoveWalletCreditCardResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByClosing())
        result.Response = resp
        return
    }

    // UpdateBankAccount sends the update bank account request.
    //
    // updateBankAccountModel is the update bank account model.
    func (client BaseClient) UpdateBankAccount(ctx context.Context, updateBankAccountModel UpdateBankAccountModel) (result SetObject, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateBankAccountModel,
         Constraints: []validation.Constraint{	{Target: "updateBankAccountModel.AccountHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateBankAccountModel.AccountHolderAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateBankAccountModel.AccountHolderAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "updateBankAccountModel.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","UpdateBankAccount")
        }

        req, err := client.UpdateBankAccountPreparer(ctx, updateBankAccountModel)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateBankAccount", nil , "Failure preparing request")
            return
        }

        resp, err := client.UpdateBankAccountSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateBankAccount", resp, "Failure sending request")
            return
        }

        result, err = client.UpdateBankAccountResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateBankAccount", resp, "Failure responding to request")
        }

        return
    }

    // UpdateBankAccountPreparer prepares the UpdateBankAccount request.
    func (client BaseClient) UpdateBankAccountPreparer(ctx context.Context, updateBankAccountModel UpdateBankAccountModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPut(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/bankaccounts"),
            autorest.WithJSON(updateBankAccountModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateBankAccountSender sends the UpdateBankAccount request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) UpdateBankAccountSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // UpdateBankAccountResponder handles the response to the UpdateBankAccount request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateBankAccountResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // UpdateCreditCard sends the update credit card request.
    //
    // updateCreditCardModel is the update credit card model.
    func (client BaseClient) UpdateCreditCard(ctx context.Context, updateCreditCardModel UpdateCreditCardModel) (result SetObject, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateCreditCardModel,
         Constraints: []validation.Constraint{	{Target: "updateCreditCardModel.Token", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.InclusiveMaximum, Rule: 12, Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationMonth", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.InclusiveMaximum, Rule: 2038, Chain: nil },
        	{Target: "updateCreditCardModel.ExpirationYear", Name: validation.InclusiveMinimum, Rule: 2018, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.CardHolderName", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateCreditCardModel.BillingAddress.Address1", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.City", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.State", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateCreditCardModel.BillingAddress.ZipCode", Name: validation.Null, Rule: true, Chain: nil },
        }},
        	{Target: "updateCreditCardModel.Email", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","UpdateCreditCard")
        }

        req, err := client.UpdateCreditCardPreparer(ctx, updateCreditCardModel)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateCreditCard", nil , "Failure preparing request")
            return
        }

        resp, err := client.UpdateCreditCardSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateCreditCard", resp, "Failure sending request")
            return
        }

        result, err = client.UpdateCreditCardResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateCreditCard", resp, "Failure responding to request")
        }

        return
    }

    // UpdateCreditCardPreparer prepares the UpdateCreditCard request.
    func (client BaseClient) UpdateCreditCardPreparer(ctx context.Context, updateCreditCardModel UpdateCreditCardModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPut(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/creditcards"),
            autorest.WithJSON(updateCreditCardModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateCreditCardSender sends the UpdateCreditCard request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) UpdateCreditCardSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // UpdateCreditCardResponder handles the response to the UpdateCreditCard request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateCreditCardResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // UpdateSubscription sends the update subscription request.
    //
    // updateSubscriptionModel is the update subscription model.
    func (client BaseClient) UpdateSubscription(ctx context.Context, updateSubscriptionModel UpdateSubscriptionModel) (result SetObject, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: updateSubscriptionModel,
         Constraints: []validation.Constraint{	{Target: "updateSubscriptionModel.ID", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateSubscriptionModel.Name", Name: validation.Null, Rule: true, Chain: nil },
        	{Target: "updateSubscriptionModel.RunDay", Name: validation.Null, Rule: true ,
        Chain: []validation.Constraint{	{Target: "updateSubscriptionModel.RunDay", Name: validation.InclusiveMaximum, Rule: 31, Chain: nil },
        	{Target: "updateSubscriptionModel.RunDay", Name: validation.InclusiveMinimum, Rule: 1, Chain: nil },
        }},
        	{Target: "updateSubscriptionModel.PaymentToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
            return result, validation.NewErrorWithValidationError(err, "softheonwalletapiclient.BaseClient","UpdateSubscription")
        }

        req, err := client.UpdateSubscriptionPreparer(ctx, updateSubscriptionModel)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateSubscription", nil , "Failure preparing request")
            return
        }

        resp, err := client.UpdateSubscriptionSender(req)
        if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateSubscription", resp, "Failure sending request")
            return
        }

        result, err = client.UpdateSubscriptionResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateSubscription", resp, "Failure responding to request")
        }

        return
    }

    // UpdateSubscriptionPreparer prepares the UpdateSubscription request.
    func (client BaseClient) UpdateSubscriptionPreparer(ctx context.Context, updateSubscriptionModel UpdateSubscriptionModel) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPut(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPath("/v1/subscriptions"),
            autorest.WithJSON(updateSubscriptionModel))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateSubscriptionSender sends the UpdateSubscription request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) UpdateSubscriptionSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            azure.DoRetryWithRegistration(client.Client))
    }

    // UpdateSubscriptionResponder handles the response to the UpdateSubscription request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateSubscriptionResponder(resp *http.Response) (result SetObject, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
        return
    }

    // UpdateWallet sends the update wallet request.
    //
    // walletID is the wallet identifier. defaultPaymentToken is the default payment token.
    func (client BaseClient) UpdateWallet(ctx context.Context, walletID int32, defaultPaymentToken string) (result autorest.Response, err error) {
        req, err := client.UpdateWalletPreparer(ctx, walletID, defaultPaymentToken)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateWallet", nil , "Failure preparing request")
            return
        }

        resp, err := client.UpdateWalletSender(req)
        if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateWallet", resp, "Failure sending request")
            return
        }

        result, err = client.UpdateWalletResponder(resp)
        if err != nil {
            err = autorest.NewErrorWithError(err, "softheonwalletapiclient.BaseClient", "UpdateWallet", resp, "Failure responding to request")
        }

        return
    }

    // UpdateWalletPreparer prepares the UpdateWallet request.
    func (client BaseClient) UpdateWalletPreparer(ctx context.Context, walletID int32, defaultPaymentToken string) (*http.Request, error) {
        pathParameters := map[string]interface{} {
        "walletId": autorest.Encode("path",walletID),
        }

        preparer := autorest.CreatePreparer(
            autorest.AsJSON(),
            autorest.AsPut(),
            autorest.WithBaseURL(client.BaseURI),
            autorest.WithPathParameters("/v1/wallet/{walletId}",pathParameters),
            autorest.WithJSON(defaultPaymentToken))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
    }

    // UpdateWalletSender sends the UpdateWallet request. The method will close the
    // http.Response Body if it receives an error.
    func (client BaseClient) UpdateWalletSender(req *http.Request) (*http.Response, error) {
        return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
    }

    // UpdateWalletResponder handles the response to the UpdateWallet request. The method always
    // closes the http.Response Body.
    func (client BaseClient) UpdateWalletResponder(resp *http.Response) (result autorest.Response, err error) {
        err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest),
            autorest.ByClosing())
        result.Response = resp
        return
    }

