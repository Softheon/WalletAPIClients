/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { RequestOptionsBase } from "ms-rest-js";


/**
 * @interface
 * An interface representing Address.
 * Defines the properties and methods of an address.
 *
 */
export interface Address {
  /**
   * @member {string} address1 The first line of the street address.
   * Typcically contains
   * the number and street name.
   */
  address1: string;
  /**
   * @member {string} [address2] The second line of the street address.
   * Typically contains
   * an apartment number, suite number or department.
   */
  address2?: string;
  /**
   * @member {string} city The city where the address is situated.
   */
  city: string;
  /**
   * @member {string} state The state where the address is located.
   */
  state: string;
  /**
   * @member {string} zipCode The postal code for the address.
   */
  zipCode: string;
}

/**
 * @interface
 * An interface representing BankAccountModel.
 * The model sent to the client in response to a GET request for a bank
 * account.
 *
 */
export interface BankAccountModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {string} [token] The payment token for the bank account.
   */
  token?: string;
  /**
   * @member {string} [accountNumber] The bank account number.
   */
  accountNumber?: string;
  /**
   * @member {string} routingNumber The routing number of the bank where the
   * bank account was opened.
   */
  routingNumber: string;
  /**
   * @member {Type} type The bank account type. Possible values include:
   * 'Unknown', 'Checking', 'Savings'
   */
  type: Type;
  /**
   * @member {State} state The state that the bank acocunt is in. Possible
   * values include: 'Unknown', 'New', 'Pending', 'Authorized', 'Disabled'
   */
  state: State;
  /**
   * @member {string} [nickname] The aribtrary nickname of the account, used as
   * a way to identify the account.
   */
  nickname?: string;
  /**
   * @member {string} accountHolderName The name of the individual or entity
   * that is autorized to make transactions for the bank account.
   */
  accountHolderName: string;
  /**
   * @member {Address} accountHolderAddress The mailing address for the account
   * holder.
   */
  accountHolderAddress: Address;
  /**
   * @member {string} email The email address for the account holder.
   */
  email: string;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the bank account.
   */
  referenceId?: string;
  /**
   * @member {Date} [createdTime] The timestamp indicating when the bank
   * account was created.
   */
  createdTime?: Date;
  /**
   * @member {Date} [modifiedTime] The timestamp indicating the last time that
   * the details of the bank account were modified.
   */
  modifiedTime?: Date;
}

/**
 * @interface
 * An interface representing BankAccountRequestModel.
 * The request model sent by the client for adding new bank accounts to the
 * payment platform.
 *
 */
export interface BankAccountRequestModel {
  /**
   * @member {string} accountNumber The bank account number.
   */
  accountNumber: string;
  /**
   * @member {string} routingNumber The routing number of the bank where the
   * bank account was opened.
   */
  routingNumber: string;
  /**
   * @member {string} accountHolderName The name of the individual or entity
   * that is autorized to make transactions for the bank account.
   */
  accountHolderName: string;
  /**
   * @member {Address} accountHolderAddress The mailing address for the account
   * holder.
   */
  accountHolderAddress: Address;
  /**
   * @member {Type1} type The bank account type. Possible values include:
   * 'Unknown', 'Checking', 'Savings'
   */
  type: Type1;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the bank account.
   */
  referenceId?: string;
  /**
   * @member {string} [nickname] The aribtrary nickname of the account, used as
   * a way to identify the account.
   */
  nickname?: string;
  /**
   * @member {string} email The email address for the account holder.
   */
  email: string;
  /**
   * @member {string} [redirectUrl] The url that the client will be redirected
   * to after the bank account has been created.
   */
  redirectUrl?: string;
}

/**
 * @interface
 * An interface representing BankAccountResponseModel.
 * The response model that is returned to the client when a new bank account is
 * added
 * to the platform
 *
 */
export interface BankAccountResponseModel {
  /**
   * @member {string} [token] The payment token for the bank account.
   */
  token?: string;
  /**
   * @member {BankAccountState} [bankAccountState] The state that the bank
   * acocunt is in. Possible values include: 'Unknown', 'New', 'Pending',
   * 'Authorized', 'Disabled'
   */
  bankAccountState?: BankAccountState;
  /**
   * @member {string} [redirectUrl] The url that the client will be redirected
   * to after the bank account has been created.
   */
  redirectUrl?: string;
}

/**
 * @interface
 * An interface representing UpdateBankAccountModel.
 * The request model sent by the client for updating bank accounts in the
 * payment platform.
 *
 */
export interface UpdateBankAccountModel {
  /**
   * @member {string} [token] The payment token for the bank account.
   */
  token?: string;
  /**
   * @member {string} [nickname] The aribtrary nickname of the account, used as
   * a way to identify the account.
   */
  nickname?: string;
  /**
   * @member {string} accountHolderName The name of the individual or entity
   * that is autorized to make transactions for the bank account.
   */
  accountHolderName: string;
  /**
   * @member {Address} accountHolderAddress The mailing address for the account
   * holder.
   */
  accountHolderAddress: Address;
  /**
   * @member {string} email The email address for the account holder.
   */
  email: string;
}

/**
 * @interface
 * An interface representing Bin.
 * Defines a BIN (bank identification number)
 *
 */
export interface Bin {
  /**
   * @member {string} [bin] Gets the bin.
   */
  bin?: string;
  /**
   * @member {Brand} [brand] Gets or sets the brand. Possible values include:
   * 'Unknown', 'Visa', 'MasterCard', 'Amex', 'Discover'
   */
  readonly brand?: Brand;
  /**
   * @member {boolean} [isDebitCard] Gets or sets a value indicating whether
   * this instance is debit.
   */
  isDebitCard?: boolean;
  /**
   * @member {boolean} [isCheckCard] Gets or sets a value indicating whether
   * this instance is check card.
   */
  isCheckCard?: boolean;
  /**
   * @member {boolean} [isGiftCard] Gets or sets a value indicating whether
   * this instance is gift card.
   */
  isGiftCard?: boolean;
  /**
   * @member {boolean} [isCorporateCard] Gets or sets a value indicating
   * whether this instance is corporate card.
   */
  isCorporateCard?: boolean;
  /**
   * @member {boolean} [isFleetCard] Gets or sets a value indicating whether
   * this instance is fleet card.
   */
  isFleetCard?: boolean;
  /**
   * @member {boolean} [isPrepaidCard] Gets or sets a value indicating whether
   * this instance is prepaid card.
   */
  isPrepaidCard?: boolean;
}

/**
 * @interface
 * An interface representing CheckoutResponseModel.
 * Checkout Response
 *
 */
export interface CheckoutResponseModel {
  /**
   * @member {number} [checkoutId] Gets or sets the checkout identifier.
   */
  checkoutId?: number;
  /**
   * @member {string} [clientId] Gets or sets the client identifier.
   */
  clientId?: string;
  /**
   * @member {string} [redirectUrl] Gets or sets the redirect URL.
   */
  redirectUrl?: string;
  /**
   * @member {string} [referenceId] Gets or sets the reference identifier.
   */
  referenceId?: string;
  /**
   * @member {number} [amount] Gets or sets the amount.
   */
  amount?: number;
  /**
   * @member {string} [nameOnAccount] Gets or sets the name on account.
   */
  nameOnAccount?: string;
  /**
   * @member {Date} [expirationDate] Gets or sets the expiration date.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   */
  enableBillingInformation?: boolean;
  /**
   * @member {Address} [billingAddress] Gets or sets the billing address.
   */
  billingAddress?: Address;
  /**
   * @member {string} [email] Gets or sets the email.
   */
  email?: string;
  /**
   * @member {boolean} [requireEmail] Gets or sets a value indicating whether
   * [require email].
   */
  requireEmail?: boolean;
  /**
   * @member {boolean} [enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   */
  enableSaveOption?: boolean;
}

/**
 * @interface
 * An interface representing CheckoutRequestModel.
 * Checkout request model
 *
 */
export interface CheckoutRequestModel {
  /**
   * @member {string} [redirectUrl] Gets or sets the redirect URL.
   */
  redirectUrl?: string;
  /**
   * @member {string} [referenceId] Gets or sets the reference identifier.
   */
  referenceId?: string;
  /**
   * @member {number} [amount] Gets or sets the amount.
   */
  amount?: number;
  /**
   * @member {string} [nameOnAccount] Gets or sets the name on account.
   */
  nameOnAccount?: string;
  /**
   * @member {Date} [expirationDate] Gets or sets the expiration date.
   */
  expirationDate?: Date;
  /**
   * @member {boolean} [enableBillingInformation] Gets or sets a value
   * indicating whether [enable billing information].
   */
  enableBillingInformation?: boolean;
  /**
   * @member {Address} [billingAddress] Gets or sets the billing address.
   */
  billingAddress?: Address;
  /**
   * @member {string} [email] Gets or sets the email.
   */
  email?: string;
  /**
   * @member {boolean} [requireEmail] Gets or sets a value indicating whether
   * [require email].
   */
  requireEmail?: boolean;
  /**
   * @member {boolean} [enableSaveOption] Gets or sets a value indicating
   * whether [enable save option].
   */
  enableSaveOption?: boolean;
}

/**
 * @interface
 * An interface representing CreditCardModel.
 * The model sent to the client in response to a GET request for a credit card.
 *
 */
export interface CreditCardModel {
  /**
   * @member {number} [id] Gets or sets the identifier.
   */
  id?: number;
  /**
   * @member {string} [token] The payment token for the credit card.
   */
  token?: string;
  /**
   * @member {string} [cardHolderName] The name of the cardholder, as it
   * appears on the front of the credit card.
   */
  cardHolderName?: string;
  /**
   * @member {string} [cardNumber] The obfuscated credit card number for the
   * credit card, such as xxxxxxxxxxxx1234
   */
  cardNumber?: string;
  /**
   * @member {number} [expirationMonth] The expiration month of the credit
   * card.
   */
  expirationMonth?: number;
  /**
   * @member {number} [expirationYear] The expiration year of the credit card.
   */
  expirationYear?: number;
  /**
   * @member {Address} [billingAddress] The billing address for the credit card
   * holder.
   */
  billingAddress?: Address;
  /**
   * @member {string} [email] The email address for the credit card holder.
   */
  email?: string;
  /**
   * @member {CardState} [cardState] The state that the credit card is in.
   * Possible values include: 'Unknown', 'New', 'Authorized', 'Expired',
   * 'Deleted', 'Invalid'
   */
  cardState?: CardState;
  /**
   * @member {CardType} [cardType] Gets or sets the type of the card. Possible
   * values include: 'Unknown', 'Visa', 'MasterCard', 'Amex', 'Discover'
   */
  cardType?: CardType;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the credit card.
   */
  referenceId?: string;
  /**
   * @member {Date} [createdTime] The timestamp indicating when the credit card
   * was created.
   */
  createdTime?: Date;
  /**
   * @member {Date} [modifiedTime] The timestamp indicating the last time that
   * the details of the credit card were modified.
   */
  modifiedTime?: Date;
}

/**
 * @interface
 * An interface representing CreditCardRequestModel.
 * The request model sent by the client for adding new credit cards to the
 * payment platform.
 *
 */
export interface CreditCardRequestModel {
  /**
   * @member {string} cardNumber The number on the credit card.
   */
  cardNumber: string;
  /**
   * @member {string} securityCode The security, or CVV code, on the card.
   */
  securityCode: string;
  /**
   * @member {number} expirationMonth The expiration month of the credit card.
   */
  expirationMonth: number;
  /**
   * @member {number} expirationYear The expiration year of the credit card.
   */
  expirationYear: number;
  /**
   * @member {string} cardHolderName The name of the cardholder, as it appears
   * on the front of the credit card.
   */
  cardHolderName: string;
  /**
   * @member {Address} billingAddress The billing address for the credit card
   * holder..
   */
  billingAddress: Address;
  /**
   * @member {string} email A valid email address for the card holder.
   */
  email: string;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the credit card.
   */
  referenceId?: string;
  /**
   * @member {string} [redirectUrl] The url that the client will be redirected
   * to after the credit card has been created.
   */
  redirectUrl?: string;
}

/**
 * @interface
 * An interface representing CreditCardResponseModel.
 * The response model sent to the client when a new credit card is added to the
 * platform.
 *
 */
export interface CreditCardResponseModel {
  /**
   * @member {string} [token] The payment token for the credit card
   */
  token?: string;
  /**
   * @member {CardState1} [cardState] The state that the credit card is in.
   * Possible values include: 'Unknown', 'New', 'Authorized', 'Expired',
   * 'Deleted', 'Invalid'
   */
  cardState?: CardState1;
  /**
   * @member {string} [code] The pre-authorization result code.
   */
  code?: string;
  /**
   * @member {string} [message] The pre-authorization result message.
   */
  message?: string;
  /**
   * @member {string} [redirectUrl] The URL that the client will be redirected
   * to after the credit card has been created.
   */
  redirectUrl?: string;
}

/**
 * @interface
 * An interface representing UpdateCreditCardModel.
 * The request model sent by the client for updating credit cards in the
 * payment platform.
 *
 */
export interface UpdateCreditCardModel {
  /**
   * @member {string} token The payment token for the credit card.
   */
  token: string;
  /**
   * @member {number} expirationMonth The expiration month of the credit card.
   */
  expirationMonth: number;
  /**
   * @member {number} expirationYear The expiration year of the credit card.
   */
  expirationYear: number;
  /**
   * @member {string} cardHolderName The name of the cardholder, as it appears
   * on the front of the credit card.
   */
  cardHolderName: string;
  /**
   * @member {Address} billingAddress The billing address for the credit card
   * holder..
   */
  billingAddress: Address;
  /**
   * @member {string} email A valid email address for the card holder.
   */
  email: string;
}

/**
 * @interface
 * An interface representing PaymentMethodModel.
 * Defines a a funding source for a payment request.
 *
 */
export interface PaymentMethodModel {
  /**
   * @member {string} paymentToken The credit card or bank account token that
   * will be used for payment.
   */
  paymentToken: string;
  /**
   * @member {Type2} type The type of funding source that will be used for the
   * payment. Possible values include: 'Unknown', 'Credit Card', 'ACH'
   */
  type: Type2;
}

/**
 * @interface
 * An interface representing PaymentResultModel.
 * The model sent to the client as a part of the payment model.
 * Provides details on the payment result.
 *
 */
export interface PaymentResultModel {
  /**
   * @member {Status} [status] The current status of the payment. Possible
   * values include: 'Unknown', 'New', 'Authorized', 'Captured', 'Expired',
   * 'Declined', 'Failed', 'Cancelled', 'Charge Back', 'Refunded', 'Partially
   * Refunded'
   */
  status?: Status;
  /**
   * @member {string} [code] The payment result code.
   */
  code?: string;
  /**
   * @member {string} [message] The payment result message.
   */
  message?: string;
  /**
   * @member {string} [providerAccountId] The unique ID of the provider account
   * that was used to make this payment.
   */
  providerAccountId?: string;
  /**
   * @member {string} [merchantTransactionId] Tthe merchant transaction
   * identifier.
   */
  merchantTransactionId?: string;
  /**
   * @member {number} [merchantTransactionFee] The merchant transaction fee.
   */
  merchantTransactionFee?: number;
}

/**
 * @interface
 * An interface representing RefundResultModel.
 * The model sent to the client as a part of the payment model.
 * Provides details on the refund result.
 *
 */
export interface RefundResultModel {
  /**
   * @member {Status1} [status] The current status of the refund. Possible
   * values include: 'Unknown', 'New', 'Authorized', 'Captured', 'Expired',
   * 'Declined', 'Failed', 'Cancelled', 'Charge Back', 'Refunded', 'Partially
   * Refunded'
   */
  status?: Status1;
  /**
   * @member {string} [code] The refund result code.
   */
  code?: string;
  /**
   * @member {string} [message] The refund result message.
   */
  message?: string;
  /**
   * @member {string} [merchantTransactionId] The Merchant Transaction ID
   * number for the payment that is being refunded.
   */
  merchantTransactionId?: string;
  /**
   * @member {string} [providerAccountId] The unique ID of the provider account
   * that was used to make this refund.
   */
  providerAccountId?: string;
  /**
   * @member {number} [amount] The amount to be refunded.  If an amount less
   * than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified,
   * a full refund
   * will be processed.
   */
  amount?: number;
  /**
   * @member {string} [reason] The reason for issuing the refund.
   */
  reason?: string;
  /**
   * @member {Date} [createdDate] The timestamp indicating when the refund was
   * created.
   */
  createdDate?: Date;
}

/**
 * @interface
 * An interface representing PaymentModel.
 * The model sent to the client requests the details of a payment, or adds a
 * new payment
 * to the platform.
 *
 */
export interface PaymentModel {
  /**
   * @member {number} [id] The unique ID of the payment.
   */
  id?: number;
  /**
   * @member {number} [accountId] The unique ID of the account that the payment
   * was made for.
   */
  accountId?: number;
  /**
   * @member {number} [paymentAmount] The payment amount.
   */
  paymentAmount?: number;
  /**
   * @member {string} [description] The description of what was paid for.
   */
  description?: string;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the payment.
   */
  referenceId?: string;
  /**
   * @member {PaymentMethodModel} [paymentMethod] The method of payment.
   */
  paymentMethod?: PaymentMethodModel;
  /**
   * @member {PaymentResultModel} [result] The result of the payment request.
   */
  result?: PaymentResultModel;
  /**
   * @member {RefundResultModel[]} [refunds] Gets or sets the refund result.
   */
  refunds?: RefundResultModel[];
  /**
   * @member {Date} [createdDate] The timestamp indicating when the payment was
   * created.
   */
  createdDate?: Date;
  /**
   * @member {Date} [modifiedDate] The timestamp indicating the last time that
   * the details of the payment were modified.
   */
  modifiedDate?: Date;
}

/**
 * @interface
 * An interface representing PaymentFilter.
 * Defines a payment filter when requesting a collection of payments
 *
 */
export interface PaymentFilter {
  /**
   * @member {string} referenceId The client application provided reference ID
   * for the payment.
   */
  referenceId: string;
  /**
   * @member {Date} [minDate] The optional lower bound of the range for payment
   * date.
   */
  minDate?: Date;
  /**
   * @member {Date} [maxDate] The optional upper bound of the range for payment
   * date.
   */
  maxDate?: Date;
}

/**
 * @interface
 * An interface representing PaymentRequestModel.
 * The request model sent by the client to add a new payment to the platform.
 *
 */
export interface PaymentRequestModel {
  /**
   * @member {number} [paymentAmount] The payment amount.
   */
  paymentAmount?: number;
  /**
   * @member {string} [description] The description of what will be paid for.
   */
  description?: string;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the payment.
   */
  referenceId?: string;
  /**
   * @member {PaymentMethodModel} paymentMethod The method of payment.
   */
  paymentMethod: PaymentMethodModel;
  /**
   * @member {string} [callbackUrl] The callback URL where payment
   * notifications will be sent.  Payment notifications are sent when the
   * state of a payment changes.  Notifications will be sent as an HTTP POST to
   * the URL provided and will
   * contain a PaymentId and optional ReferenceId, if one was provided when the
   * payment was created.
   */
  callbackUrl?: string;
}

/**
 * @interface
 * An interface representing RefundRequestModel.
 * The request model sent by the client to add a new refund to the platform.
 *
 */
export interface RefundRequestModel {
  /**
   * @member {number} [amount] The amount to be refunded.  If an amount less
   * than the original payment amount is
   * specified, a partial refund will be processed.  If no amount is specified,
   * a full refund
   * will be processed.
   */
  amount?: number;
  /**
   * @member {string} reason The reason for issuing the refund.
   */
  reason: string;
}

/**
 * @interface
 * An interface representing SubscriptionModel.
 * The model sent to the client in response to a GET request for a payment
 * subscription.
 *
 */
export interface SubscriptionModel {
  /**
   * @member {number} [id] The id of the payment subscription.
   */
  id?: number;
  /**
   * @member {string} [name] The name of payment subscription.
   */
  name?: string;
  /**
   * @member {string} [description] The description of payment subscription.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: string }} [properties] The properties
   * of the payment subscription.
   */
  properties?: { [propertyName: string]: string };
  /**
   * @member {number} [runDay] The process day of the payment subscription.
   */
  runDay?: number;
  /**
   * @member {State1} [state] The state that payment subscription is in.
   * Possible values include: 'Active', 'Inactive', 'Expired'
   */
  state?: State1;
  /**
   * @member {PaymentType} [paymentType] The payment type of the payment
   * subscription. Possible values include: 'Unknown', 'Credit Card', 'ACH'
   */
  paymentType?: PaymentType;
  /**
   * @member {string} [paymentToken] The payment token of the payment
   * subscription.
   */
  paymentToken?: string;
  /**
   * @member {AmountType} [amountType] The amount type of the payment
   * subscription. Possible values include: 'Fixed', 'Dynamic'
   */
  amountType?: AmountType;
  /**
   * @member {number} [amount] The amount of money to be charged by the payment
   * subscription.
   */
  amount?: number;
  /**
   * @member {string} [amountWebServiceURL] The url of web api to use to
   * retrieve the amount to be charged by the payment subscription.
   */
  amountWebServiceURL?: string;
  /**
   * @member {string} [callbackWebServiceURL] The url of a web api to use to
   * post back notifications each time payment subscription is processed.
   */
  callbackWebServiceURL?: string;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the credit card.
   */
  referenceId?: string;
  /**
   * @member {Date} [lastProcessed] The timestamp indicating when the
   * subscription was last processed.
   */
  lastProcessed?: Date;
  /**
   * @member {Date} [endDate] The date indicating when the payment subscription
   * should be stopped.
   */
  endDate?: Date;
  /**
   * @member {Date} [createdTime] The timestamp indicating when the credit card
   * was created.
   */
  createdTime?: Date;
  /**
   * @member {Date} [modifiedTime] The timestamp indicating the last time that
   * the details of the credit card were modified.
   */
  modifiedTime?: Date;
}

/**
 * @interface
 * An interface representing SubscriptionRequestModel.
 * The request model sent by the client for adding new subscription to the
 * payment platform.
 *
 */
export interface SubscriptionRequestModel {
  /**
   * @member {string} name The name of payment subscription.
   */
  name: string;
  /**
   * @member {string} [description] The description of payment subscription.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: string }} [properties] The properties
   * of the payment subscription.
   */
  properties?: { [propertyName: string]: string };
  /**
   * @member {number} runDay The process day of the payment subscription.
   */
  runDay: number;
  /**
   * @member {State2} state The state that payment subscription is in. Possible
   * values include: 'Active', 'Inactive', 'Expired'
   */
  state: State2;
  /**
   * @member {PaymentType1} paymentType The payment type of the payment
   * subscription. Possible values include: 'Unknown', 'Credit Card', 'ACH'
   */
  paymentType: PaymentType1;
  /**
   * @member {string} paymentToken The payment token of the payment
   * subscription.
   */
  paymentToken: string;
  /**
   * @member {AmountType1} amountType The amount type of the payment
   * subscription. Possible values include: 'Fixed', 'Dynamic'
   */
  amountType: AmountType1;
  /**
   * @member {number} [amount] The amount of money to be charged by the payment
   * subscription.
   */
  amount?: number;
  /**
   * @member {string} [amountWebServiceURL] The url of web api to use to
   * retrieve the amount to be charged by the payment subscription.
   */
  amountWebServiceURL?: string;
  /**
   * @member {string} [callbackWebServiceURL] The url of a web api to use to
   * post back notifications each time payment subscription is processed.
   */
  callbackWebServiceURL?: string;
  /**
   * @member {Date} [endDate] The date indicating when the payment subscription
   * should be stopped.
   */
  endDate?: Date;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the credit card.
   */
  referenceId?: string;
}

/**
 * @interface
 * An interface representing SubscriptionResponceModel.
 * The response model that is returned to the client when a new payment
 * subscription is added to the platform.
 *
 */
export interface SubscriptionResponceModel {
  /**
   * @member {string} [referenceId] Gets or sets the reference id.
   */
  referenceId?: string;
  /**
   * @member {State3} [state] Gets or sets the subscription state. Possible
   * values include: 'Active', 'Inactive', 'Expired'
   */
  state?: State3;
}

/**
 * @interface
 * An interface representing UpdateSubscriptionModel.
 * The request model sent by the client for updating subscription in the
 * payment platform.
 *
 */
export interface UpdateSubscriptionModel {
  /**
   * @member {number} id The id of the payment subscription.
   */
  id: number;
  /**
   * @member {string} name The name of payment subscription.
   */
  name: string;
  /**
   * @member {string} [description] The description of payment subscription.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: string }} [properties] The properties
   * of the payment subscription.
   */
  properties?: { [propertyName: string]: string };
  /**
   * @member {number} runDay The process day of the payment subscription.
   */
  runDay: number;
  /**
   * @member {State4} state The state that payment subscription is in. Possible
   * values include: 'Active', 'Inactive', 'Expired'
   */
  state: State4;
  /**
   * @member {PaymentType2} paymentType The payment type of the payment
   * subscription. Possible values include: 'Unknown', 'Credit Card', 'ACH'
   */
  paymentType: PaymentType2;
  /**
   * @member {string} paymentToken The payment token of the payment
   * subscription.
   */
  paymentToken: string;
  /**
   * @member {AmountType2} amountType The amount type of the payment
   * subscription. Possible values include: 'Fixed', 'Dynamic'
   */
  amountType: AmountType2;
  /**
   * @member {number} [amount] The amount of money to be charged by the payment
   * subscription.
   */
  amount?: number;
  /**
   * @member {string} [amountWebServiceURL] The url of web api to use to
   * retrieve the amount to be charged by the payment subscription.
   */
  amountWebServiceURL?: string;
  /**
   * @member {string} [callbackWebServiceURL] The url of a web api to use to
   * post back notifications each time payment subscription is processed.
   */
  callbackWebServiceURL?: string;
  /**
   * @member {Date} [endDate] The date indicating when the payment subscription
   * should be stopped.
   */
  endDate?: Date;
  /**
   * @member {string} [referenceId] The client application provided reference
   * ID for the credit card.
   */
  referenceId?: string;
}

/**
 * @interface
 * An interface representing WalletModel.
 * Wallet Model
 *
 */
export interface WalletModel {
  /**
   * @member {number} id Gets or sets the identifier.
   */
  id: number;
  /**
   * @member {string} [defaultToken] Gets or sets the default token.
   */
  defaultToken?: string;
  /**
   * @member {CreditCardModel[]} [creditCards] Gets or sets the credit cards.
   */
  creditCards?: CreditCardModel[];
  /**
   * @member {BankAccountModel[]} [bankAccounts] Gets or sets the bank
   * accounts.
   */
  bankAccounts?: BankAccountModel[];
}

/**
 * @interface
 * An interface representing WalletRequestModel.
 * Wallet Request Model
 *
 */
export interface WalletRequestModel {
  /**
   * @member {string} [referenceId] Gets or sets the reference identifier.
   */
  referenceId?: string;
}

/**
 * @interface
 * An interface representing WalletCreditCardRequestModel.
 * Wallet credit card request model
 *
 */
export interface WalletCreditCardRequestModel {
  /**
   * @member {string} [paymentToken] Gets or sets the payment token.
   */
  paymentToken?: string;
  /**
   * @member {boolean} [isDefault] Gets or sets a value indicating whether this
   * instance is default.
   */
  isDefault?: boolean;
}

/**
 * @interface
 * An interface representing WalletBankAccountRequestModel.
 * Wallet Bank Account Request Model
 *
 */
export interface WalletBankAccountRequestModel {
  /**
   * @member {string} [paymentToken] Gets or sets the payment token.
   */
  paymentToken?: string;
  /**
   * @member {boolean} [isDefault] Gets or sets a value indicating whether this
   * instance is default.
   */
  isDefault?: boolean;
}

/**
 * @interface
 * An interface representing SoftheonWalletAPIGetPaymentsByReferenceIdOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface SoftheonWalletAPIGetPaymentsByReferenceIdOptionalParams extends RequestOptionsBase {
  /**
   * @member {Date} [minDate] The optional lower bound of the range for payment
   * date.
   */
  minDate?: Date;
  /**
   * @member {Date} [maxDate] The optional upper bound of the range for payment
   * date.
   */
  maxDate?: Date;
}

/**
 * Defines values for Type.
 * Possible values include: 'Unknown', 'Checking', 'Savings'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type = <Type>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type {
  Unknown = 'Unknown',
  Checking = 'Checking',
  Savings = 'Savings',
}

/**
 * Defines values for State.
 * Possible values include: 'Unknown', 'New', 'Pending', 'Authorized',
 * 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State = <State>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State {
  Unknown = 'Unknown',
  New = 'New',
  Pending = 'Pending',
  Authorized = 'Authorized',
  Disabled = 'Disabled',
}

/**
 * Defines values for Type1.
 * Possible values include: 'Unknown', 'Checking', 'Savings'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type1 = <Type1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type1 {
  Unknown = 'Unknown',
  Checking = 'Checking',
  Savings = 'Savings',
}

/**
 * Defines values for BankAccountState.
 * Possible values include: 'Unknown', 'New', 'Pending', 'Authorized',
 * 'Disabled'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: BankAccountState =
 * <BankAccountState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum BankAccountState {
  Unknown = 'Unknown',
  New = 'New',
  Pending = 'Pending',
  Authorized = 'Authorized',
  Disabled = 'Disabled',
}

/**
 * Defines values for Brand.
 * Possible values include: 'Unknown', 'Visa', 'MasterCard', 'Amex', 'Discover'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Brand = <Brand>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Brand {
  Unknown = 'Unknown',
  Visa = 'Visa',
  MasterCard = 'MasterCard',
  Amex = 'Amex',
  Discover = 'Discover',
}

/**
 * Defines values for CardState.
 * Possible values include: 'Unknown', 'New', 'Authorized', 'Expired',
 * 'Deleted', 'Invalid'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CardState = <CardState>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CardState {
  Unknown = 'Unknown',
  New = 'New',
  Authorized = 'Authorized',
  Expired = 'Expired',
  Deleted = 'Deleted',
  Invalid = 'Invalid',
}

/**
 * Defines values for CardType.
 * Possible values include: 'Unknown', 'Visa', 'MasterCard', 'Amex', 'Discover'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CardType = <CardType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CardType {
  Unknown = 'Unknown',
  Visa = 'Visa',
  MasterCard = 'MasterCard',
  Amex = 'Amex',
  Discover = 'Discover',
}

/**
 * Defines values for CardState1.
 * Possible values include: 'Unknown', 'New', 'Authorized', 'Expired',
 * 'Deleted', 'Invalid'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: CardState1 = <CardState1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum CardState1 {
  Unknown = 'Unknown',
  New = 'New',
  Authorized = 'Authorized',
  Expired = 'Expired',
  Deleted = 'Deleted',
  Invalid = 'Invalid',
}

/**
 * Defines values for Type2.
 * Possible values include: 'Unknown', 'Credit Card', 'ACH'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Type2 = <Type2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Type2 {
  Unknown = 'Unknown',
  CreditCard = 'Credit Card',
  ACH = 'ACH',
}

/**
 * Defines values for Status.
 * Possible values include: 'Unknown', 'New', 'Authorized', 'Captured',
 * 'Expired', 'Declined', 'Failed', 'Cancelled', 'Charge Back', 'Refunded',
 * 'Partially Refunded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Status = <Status>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Status {
  Unknown = 'Unknown',
  New = 'New',
  Authorized = 'Authorized',
  Captured = 'Captured',
  Expired = 'Expired',
  Declined = 'Declined',
  Failed = 'Failed',
  Cancelled = 'Cancelled',
  ChargeBack = 'Charge Back',
  Refunded = 'Refunded',
  PartiallyRefunded = 'Partially Refunded',
}

/**
 * Defines values for Status1.
 * Possible values include: 'Unknown', 'New', 'Authorized', 'Captured',
 * 'Expired', 'Declined', 'Failed', 'Cancelled', 'Charge Back', 'Refunded',
 * 'Partially Refunded'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: Status1 = <Status1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum Status1 {
  Unknown = 'Unknown',
  New = 'New',
  Authorized = 'Authorized',
  Captured = 'Captured',
  Expired = 'Expired',
  Declined = 'Declined',
  Failed = 'Failed',
  Cancelled = 'Cancelled',
  ChargeBack = 'Charge Back',
  Refunded = 'Refunded',
  PartiallyRefunded = 'Partially Refunded',
}

/**
 * Defines values for State1.
 * Possible values include: 'Active', 'Inactive', 'Expired'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State1 = <State1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State1 {
  Active = 'Active',
  Inactive = 'Inactive',
  Expired = 'Expired',
}

/**
 * Defines values for PaymentType.
 * Possible values include: 'Unknown', 'Credit Card', 'ACH'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PaymentType =
 * <PaymentType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PaymentType {
  Unknown = 'Unknown',
  CreditCard = 'Credit Card',
  ACH = 'ACH',
}

/**
 * Defines values for AmountType.
 * Possible values include: 'Fixed', 'Dynamic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AmountType = <AmountType>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AmountType {
  Fixed = 'Fixed',
  Dynamic = 'Dynamic',
}

/**
 * Defines values for State2.
 * Possible values include: 'Active', 'Inactive', 'Expired'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State2 = <State2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State2 {
  Active = 'Active',
  Inactive = 'Inactive',
  Expired = 'Expired',
}

/**
 * Defines values for PaymentType1.
 * Possible values include: 'Unknown', 'Credit Card', 'ACH'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PaymentType1 =
 * <PaymentType1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PaymentType1 {
  Unknown = 'Unknown',
  CreditCard = 'Credit Card',
  ACH = 'ACH',
}

/**
 * Defines values for AmountType1.
 * Possible values include: 'Fixed', 'Dynamic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AmountType1 =
 * <AmountType1>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AmountType1 {
  Fixed = 'Fixed',
  Dynamic = 'Dynamic',
}

/**
 * Defines values for State3.
 * Possible values include: 'Active', 'Inactive', 'Expired'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State3 = <State3>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State3 {
  Active = 'Active',
  Inactive = 'Inactive',
  Expired = 'Expired',
}

/**
 * Defines values for State4.
 * Possible values include: 'Active', 'Inactive', 'Expired'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: State4 = <State4>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum State4 {
  Active = 'Active',
  Inactive = 'Inactive',
  Expired = 'Expired',
}

/**
 * Defines values for PaymentType2.
 * Possible values include: 'Unknown', 'Credit Card', 'ACH'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: PaymentType2 =
 * <PaymentType2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum PaymentType2 {
  Unknown = 'Unknown',
  CreditCard = 'Credit Card',
  ACH = 'ACH',
}

/**
 * Defines values for AmountType2.
 * Possible values include: 'Fixed', 'Dynamic'
 * There could be more values for this enum apart from the ones defined here.If
 * you want to set a value that is not from the known values then you can do
 * the following:
 * let param: AmountType2 =
 * <AmountType2>"someUnknownValueThatWillStillBeValid";
 * @readonly
 * @enum {string}
 */
export enum AmountType2 {
  Fixed = 'Fixed',
  Dynamic = 'Dynamic',
}
