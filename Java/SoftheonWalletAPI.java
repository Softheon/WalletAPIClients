/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package walletapiv2;

import .models.BankAccountModel;
import .models.BankAccountRequestModel;
import .models.BankAccountResponseModel;
import .models.Bin;
import .models.BinRequestModel;
import .models.CheckoutRequestModel;
import .models.CheckoutResponseModel;
import .models.CreditCardModel;
import .models.CreditCardRequestModel;
import .models.CreditCardResponseModel;
import .models.PaymentModel;
import .models.PaymentRequestModel;
import .models.RefundRequestModel;
import .models.RefundResultModel;
import .models.SubscriptionModel;
import .models.SubscriptionRequestModel;
import .models.SubscriptionResponseModel;
import .models.UpdateBankAccountModel;
import .models.UpdateCreditCardModel;
import .models.UpdateSubscriptionModel;
import .models.WalletBankAccountRequestModel;
import .models.WalletCreditCardRequestModel;
import .models.WalletModel;
import .models.WalletRequestModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import org.joda.time.DateTime;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for SoftheonWalletAPI class.
 */
public interface SoftheonWalletAPI {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://api-model.softheon.com/payments";

    /**
     * Gets the bank account associated with the specified token.
     *
     * @param token The token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BankAccountModel object if successful.
     */
    BankAccountModel getBankAccountByToken(String token);

    /**
     * Gets the bank account associated with the specified token.
     *
     * @param token The token.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BankAccountModel> getBankAccountByTokenAsync(String token, final ServiceCallback<BankAccountModel> serviceCallback);

    /**
     * Gets the bank account associated with the specified token.
     *
     * @param token The token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BankAccountModel object
     */
    Observable<BankAccountModel> getBankAccountByTokenAsync(String token);

    /**
     * Gets the bank account associated with the specified token.
     *
     * @param token The token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BankAccountModel object
     */
    Observable<ServiceResponse<BankAccountModel>> getBankAccountByTokenWithServiceResponseAsync(String token);

    /**
     * Gets all bank accounts associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BankAccountModel&gt; object if successful.
     */
    List<BankAccountModel> getBankAccountsByReferenceId(String referenceId);

    /**
     * Gets all bank accounts associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BankAccountModel>> getBankAccountsByReferenceIdAsync(String referenceId, final ServiceCallback<List<BankAccountModel>> serviceCallback);

    /**
     * Gets all bank accounts associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BankAccountModel&gt; object
     */
    Observable<List<BankAccountModel>> getBankAccountsByReferenceIdAsync(String referenceId);

    /**
     * Gets all bank accounts associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BankAccountModel&gt; object
     */
    Observable<ServiceResponse<List<BankAccountModel>>> getBankAccountsByReferenceIdWithServiceResponseAsync(String referenceId);

    /**
     * Updates a bank account.
     *
     * @param updateBankAccountModel The update bank account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateBankAccount(UpdateBankAccountModel updateBankAccountModel);

    /**
     * Updates a bank account.
     *
     * @param updateBankAccountModel The update bank account model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateBankAccountAsync(UpdateBankAccountModel updateBankAccountModel, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a bank account.
     *
     * @param updateBankAccountModel The update bank account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateBankAccountAsync(UpdateBankAccountModel updateBankAccountModel);

    /**
     * Updates a bank account.
     *
     * @param updateBankAccountModel The update bank account model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateBankAccountWithServiceResponseAsync(UpdateBankAccountModel updateBankAccountModel);

    /**
     * Posts a new bank account.
     *
     * @param bankAccountRequest The bank account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BankAccountResponseModel object if successful.
     */
    BankAccountResponseModel createBankAccount(BankAccountRequestModel bankAccountRequest);

    /**
     * Posts a new bank account.
     *
     * @param bankAccountRequest The bank account.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BankAccountResponseModel> createBankAccountAsync(BankAccountRequestModel bankAccountRequest, final ServiceCallback<BankAccountResponseModel> serviceCallback);

    /**
     * Posts a new bank account.
     *
     * @param bankAccountRequest The bank account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BankAccountResponseModel object
     */
    Observable<BankAccountResponseModel> createBankAccountAsync(BankAccountRequestModel bankAccountRequest);

    /**
     * Posts a new bank account.
     *
     * @param bankAccountRequest The bank account.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BankAccountResponseModel object
     */
    Observable<ServiceResponse<BankAccountResponseModel>> createBankAccountWithServiceResponseAsync(BankAccountRequestModel bankAccountRequest);

    /**
     * Gets the bin information for a specified credit card number.
     *
     * @param binRequest The bin request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Bin object if successful.
     */
    Bin getBin(BinRequestModel binRequest);

    /**
     * Gets the bin information for a specified credit card number.
     *
     * @param binRequest The bin request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Bin> getBinAsync(BinRequestModel binRequest, final ServiceCallback<Bin> serviceCallback);

    /**
     * Gets the bin information for a specified credit card number.
     *
     * @param binRequest The bin request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Bin object
     */
    Observable<Bin> getBinAsync(BinRequestModel binRequest);

    /**
     * Gets the bin information for a specified credit card number.
     *
     * @param binRequest The bin request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Bin object
     */
    Observable<ServiceResponse<Bin>> getBinWithServiceResponseAsync(BinRequestModel binRequest);

    /**
     * Gets the checkout.
     *
     * @param checkoutId The checkout identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckoutResponseModel object if successful.
     */
    CheckoutResponseModel getCheckout(int checkoutId);

    /**
     * Gets the checkout.
     *
     * @param checkoutId The checkout identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CheckoutResponseModel> getCheckoutAsync(int checkoutId, final ServiceCallback<CheckoutResponseModel> serviceCallback);

    /**
     * Gets the checkout.
     *
     * @param checkoutId The checkout identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckoutResponseModel object
     */
    Observable<CheckoutResponseModel> getCheckoutAsync(int checkoutId);

    /**
     * Gets the checkout.
     *
     * @param checkoutId The checkout identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckoutResponseModel object
     */
    Observable<ServiceResponse<CheckoutResponseModel>> getCheckoutWithServiceResponseAsync(int checkoutId);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckoutResponseModel object if successful.
     */
    CheckoutResponseModel createCheckout(CheckoutRequestModel model);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CheckoutResponseModel> createCheckoutAsync(CheckoutRequestModel model, final ServiceCallback<CheckoutResponseModel> serviceCallback);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckoutResponseModel object
     */
    Observable<CheckoutResponseModel> createCheckoutAsync(CheckoutRequestModel model);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckoutResponseModel object
     */
    Observable<ServiceResponse<CheckoutResponseModel>> createCheckoutWithServiceResponseAsync(CheckoutRequestModel model);

    /**
     * Gets all credit cards associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CreditCardModel&gt; object if successful.
     */
    List<CreditCardModel> getCreditCardsByReferenceId(String referenceId);

    /**
     * Gets all credit cards associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<CreditCardModel>> getCreditCardsByReferenceIdAsync(String referenceId, final ServiceCallback<List<CreditCardModel>> serviceCallback);

    /**
     * Gets all credit cards associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CreditCardModel&gt; object
     */
    Observable<List<CreditCardModel>> getCreditCardsByReferenceIdAsync(String referenceId);

    /**
     * Gets all credit cards associated with the specified reference identifier.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CreditCardModel&gt; object
     */
    Observable<ServiceResponse<List<CreditCardModel>>> getCreditCardsByReferenceIdWithServiceResponseAsync(String referenceId);

    /**
     * Updates a credit card.
     *
     * @param updateCreditCardModel The update credit card model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateCreditCard(UpdateCreditCardModel updateCreditCardModel);

    /**
     * Updates a credit card.
     *
     * @param updateCreditCardModel The update credit card model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateCreditCardAsync(UpdateCreditCardModel updateCreditCardModel, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a credit card.
     *
     * @param updateCreditCardModel The update credit card model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateCreditCardAsync(UpdateCreditCardModel updateCreditCardModel);

    /**
     * Updates a credit card.
     *
     * @param updateCreditCardModel The update credit card model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateCreditCardWithServiceResponseAsync(UpdateCreditCardModel updateCreditCardModel);

    /**
     * Posts a new credit card.
     *
     * @param creditCardRequest The new credit card.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CreditCardResponseModel object if successful.
     */
    CreditCardResponseModel createCreditCard(CreditCardRequestModel creditCardRequest);

    /**
     * Posts a new credit card.
     *
     * @param creditCardRequest The new credit card.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CreditCardResponseModel> createCreditCardAsync(CreditCardRequestModel creditCardRequest, final ServiceCallback<CreditCardResponseModel> serviceCallback);

    /**
     * Posts a new credit card.
     *
     * @param creditCardRequest The new credit card.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreditCardResponseModel object
     */
    Observable<CreditCardResponseModel> createCreditCardAsync(CreditCardRequestModel creditCardRequest);

    /**
     * Posts a new credit card.
     *
     * @param creditCardRequest The new credit card.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CreditCardResponseModel object
     */
    Observable<ServiceResponse<CreditCardResponseModel>> createCreditCardWithServiceResponseAsync(CreditCardRequestModel creditCardRequest);

    /**
     * Gets the specified payment by its identifier.
     *
     * @param id The payment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PaymentModel object if successful.
     */
    PaymentModel getPayment(int id);

    /**
     * Gets the specified payment by its identifier.
     *
     * @param id The payment identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PaymentModel> getPaymentAsync(int id, final ServiceCallback<PaymentModel> serviceCallback);

    /**
     * Gets the specified payment by its identifier.
     *
     * @param id The payment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PaymentModel object
     */
    Observable<PaymentModel> getPaymentAsync(int id);

    /**
     * Gets the specified payment by its identifier.
     *
     * @param id The payment identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PaymentModel object
     */
    Observable<ServiceResponse<PaymentModel>> getPaymentWithServiceResponseAsync(int id);

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PaymentModel&gt; object if successful.
     */
    List<PaymentModel> getPaymentsByReferenceId();

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PaymentModel>> getPaymentsByReferenceIdAsync(final ServiceCallback<List<PaymentModel>> serviceCallback);

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PaymentModel&gt; object
     */
    Observable<List<PaymentModel>> getPaymentsByReferenceIdAsync();

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PaymentModel&gt; object
     */
    Observable<ServiceResponse<List<PaymentModel>>> getPaymentsByReferenceIdWithServiceResponseAsync();
    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @param referenceId Gets or sets the reference identifier.
     * @param minDate Gets or sets the minimum date.
     * @param maxDate Gets or sets the maximum date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PaymentModel&gt; object if successful.
     */
    List<PaymentModel> getPaymentsByReferenceId(String referenceId, DateTime minDate, DateTime maxDate);

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @param referenceId Gets or sets the reference identifier.
     * @param minDate Gets or sets the minimum date.
     * @param maxDate Gets or sets the maximum date.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PaymentModel>> getPaymentsByReferenceIdAsync(String referenceId, DateTime minDate, DateTime maxDate, final ServiceCallback<List<PaymentModel>> serviceCallback);

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @param referenceId Gets or sets the reference identifier.
     * @param minDate Gets or sets the minimum date.
     * @param maxDate Gets or sets the maximum date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PaymentModel&gt; object
     */
    Observable<List<PaymentModel>> getPaymentsByReferenceIdAsync(String referenceId, DateTime minDate, DateTime maxDate);

    /**
     * Gets payments associated with the specified reference identifier.
     *
     * @param referenceId Gets or sets the reference identifier.
     * @param minDate Gets or sets the minimum date.
     * @param maxDate Gets or sets the maximum date.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PaymentModel&gt; object
     */
    Observable<ServiceResponse<List<PaymentModel>>> getPaymentsByReferenceIdWithServiceResponseAsync(String referenceId, DateTime minDate, DateTime maxDate);

    /**
     * Posts a new payment.
     *
     * @param paymentRequest The new payment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PaymentModel object if successful.
     */
    PaymentModel createPayment(PaymentRequestModel paymentRequest);

    /**
     * Posts a new payment.
     *
     * @param paymentRequest The new payment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PaymentModel> createPaymentAsync(PaymentRequestModel paymentRequest, final ServiceCallback<PaymentModel> serviceCallback);

    /**
     * Posts a new payment.
     *
     * @param paymentRequest The new payment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PaymentModel object
     */
    Observable<PaymentModel> createPaymentAsync(PaymentRequestModel paymentRequest);

    /**
     * Posts a new payment.
     *
     * @param paymentRequest The new payment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PaymentModel object
     */
    Observable<ServiceResponse<PaymentModel>> createPaymentWithServiceResponseAsync(PaymentRequestModel paymentRequest);

    /**
     * Gets the refunds associated with the specified payment.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RefundResultModel&gt; object if successful.
     */
    List<RefundResultModel> getRefunds(int id);

    /**
     * Gets the refunds associated with the specified payment.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<RefundResultModel>> getRefundsAsync(int id, final ServiceCallback<List<RefundResultModel>> serviceCallback);

    /**
     * Gets the refunds associated with the specified payment.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RefundResultModel&gt; object
     */
    Observable<List<RefundResultModel>> getRefundsAsync(int id);

    /**
     * Gets the refunds associated with the specified payment.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RefundResultModel&gt; object
     */
    Observable<ServiceResponse<List<RefundResultModel>>> getRefundsWithServiceResponseAsync(int id);

    /**
     * Posts a new refund request.
     *
     * @param id The identifier of the payment to be refunded.
     * @param refundRequestModel The refund model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RefundResultModel object if successful.
     */
    RefundResultModel createRefund(int id, RefundRequestModel refundRequestModel);

    /**
     * Posts a new refund request.
     *
     * @param id The identifier of the payment to be refunded.
     * @param refundRequestModel The refund model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RefundResultModel> createRefundAsync(int id, RefundRequestModel refundRequestModel, final ServiceCallback<RefundResultModel> serviceCallback);

    /**
     * Posts a new refund request.
     *
     * @param id The identifier of the payment to be refunded.
     * @param refundRequestModel The refund model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RefundResultModel object
     */
    Observable<RefundResultModel> createRefundAsync(int id, RefundRequestModel refundRequestModel);

    /**
     * Posts a new refund request.
     *
     * @param id The identifier of the payment to be refunded.
     * @param refundRequestModel The refund model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RefundResultModel object
     */
    Observable<ServiceResponse<RefundResultModel>> createRefundWithServiceResponseAsync(int id, RefundRequestModel refundRequestModel);

    /**
     * Gets a single payment subscription with the specified subscription id.
     *
     * @param id The subscription id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionModel object if successful.
     */
    SubscriptionModel getSubscription(String id);

    /**
     * Gets a single payment subscription with the specified subscription id.
     *
     * @param id The subscription id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SubscriptionModel> getSubscriptionAsync(String id, final ServiceCallback<SubscriptionModel> serviceCallback);

    /**
     * Gets a single payment subscription with the specified subscription id.
     *
     * @param id The subscription id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionModel object
     */
    Observable<SubscriptionModel> getSubscriptionAsync(String id);

    /**
     * Gets a single payment subscription with the specified subscription id.
     *
     * @param id The subscription id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionModel object
     */
    Observable<ServiceResponse<SubscriptionModel>> getSubscriptionWithServiceResponseAsync(String id);

    /**
     * Gets all payment subscriptions associated with the specified reference id.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SubscriptionModel&gt; object if successful.
     */
    List<SubscriptionModel> getSubscriptionsByReferenceId(String referenceId);

    /**
     * Gets all payment subscriptions associated with the specified reference id.
     *
     * @param referenceId The reference identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SubscriptionModel>> getSubscriptionsByReferenceIdAsync(String referenceId, final ServiceCallback<List<SubscriptionModel>> serviceCallback);

    /**
     * Gets all payment subscriptions associated with the specified reference id.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SubscriptionModel&gt; object
     */
    Observable<List<SubscriptionModel>> getSubscriptionsByReferenceIdAsync(String referenceId);

    /**
     * Gets all payment subscriptions associated with the specified reference id.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SubscriptionModel&gt; object
     */
    Observable<ServiceResponse<List<SubscriptionModel>>> getSubscriptionsByReferenceIdWithServiceResponseAsync(String referenceId);

    /**
     * Updates a payment subscription.
     *
     * @param updateSubscriptionModel The update subscription model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSubscription(UpdateSubscriptionModel updateSubscriptionModel);

    /**
     * Updates a payment subscription.
     *
     * @param updateSubscriptionModel The update subscription model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSubscriptionAsync(UpdateSubscriptionModel updateSubscriptionModel, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates a payment subscription.
     *
     * @param updateSubscriptionModel The update subscription model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateSubscriptionAsync(UpdateSubscriptionModel updateSubscriptionModel);

    /**
     * Updates a payment subscription.
     *
     * @param updateSubscriptionModel The update subscription model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateSubscriptionWithServiceResponseAsync(UpdateSubscriptionModel updateSubscriptionModel);

    /**
     * Posts a new payment subscription.
     *
     * @param subscriptionRequest The subscription request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SubscriptionResponseModel object if successful.
     */
    SubscriptionResponseModel createSubscription(SubscriptionRequestModel subscriptionRequest);

    /**
     * Posts a new payment subscription.
     *
     * @param subscriptionRequest The subscription request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SubscriptionResponseModel> createSubscriptionAsync(SubscriptionRequestModel subscriptionRequest, final ServiceCallback<SubscriptionResponseModel> serviceCallback);

    /**
     * Posts a new payment subscription.
     *
     * @param subscriptionRequest The subscription request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionResponseModel object
     */
    Observable<SubscriptionResponseModel> createSubscriptionAsync(SubscriptionRequestModel subscriptionRequest);

    /**
     * Posts a new payment subscription.
     *
     * @param subscriptionRequest The subscription request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SubscriptionResponseModel object
     */
    Observable<ServiceResponse<SubscriptionResponseModel>> createSubscriptionWithServiceResponseAsync(SubscriptionRequestModel subscriptionRequest);

    /**
     * Gets the wallet by wallet ID.
     *
     * @param walletId The wallet identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletModel object if successful.
     */
    WalletModel getWallet(int walletId);

    /**
     * Gets the wallet by wallet ID.
     *
     * @param walletId The wallet identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletModel> getWalletAsync(int walletId, final ServiceCallback<WalletModel> serviceCallback);

    /**
     * Gets the wallet by wallet ID.
     *
     * @param walletId The wallet identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<WalletModel> getWalletAsync(int walletId);

    /**
     * Gets the wallet by wallet ID.
     *
     * @param walletId The wallet identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<ServiceResponse<WalletModel>> getWalletWithServiceResponseAsync(int walletId);

    /**
     * Puts the wallet.
     *
     * @param walletId The wallet identifier.
     * @param defaultPaymentToken The default payment token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateWallet(int walletId, String defaultPaymentToken);

    /**
     * Puts the wallet.
     *
     * @param walletId The wallet identifier.
     * @param defaultPaymentToken The default payment token.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateWalletAsync(int walletId, String defaultPaymentToken, final ServiceCallback<Void> serviceCallback);

    /**
     * Puts the wallet.
     *
     * @param walletId The wallet identifier.
     * @param defaultPaymentToken The default payment token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateWalletAsync(int walletId, String defaultPaymentToken);

    /**
     * Puts the wallet.
     *
     * @param walletId The wallet identifier.
     * @param defaultPaymentToken The default payment token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateWalletWithServiceResponseAsync(int walletId, String defaultPaymentToken);

    /**
     * Gets the wallet by reference ID.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletModel object if successful.
     */
    WalletModel getWalletByReferenceId(String referenceId);

    /**
     * Gets the wallet by reference ID.
     *
     * @param referenceId The reference identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletModel> getWalletByReferenceIdAsync(String referenceId, final ServiceCallback<WalletModel> serviceCallback);

    /**
     * Gets the wallet by reference ID.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<WalletModel> getWalletByReferenceIdAsync(String referenceId);

    /**
     * Gets the wallet by reference ID.
     *
     * @param referenceId The reference identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<ServiceResponse<WalletModel>> getWalletByReferenceIdWithServiceResponseAsync(String referenceId);

    /**
     * Creates a new empty wallet.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int createWallet(WalletRequestModel model);

    /**
     * Creates a new empty wallet.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Integer> createWalletAsync(WalletRequestModel model, final ServiceCallback<Integer> serviceCallback);

    /**
     * Creates a new empty wallet.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> createWalletAsync(WalletRequestModel model);

    /**
     * Creates a new empty wallet.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<ServiceResponse<Integer>> createWalletWithServiceResponseAsync(WalletRequestModel model);

    /**
     * Adds a new credit card to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletModel object if successful.
     */
    WalletModel addWalletCreditCard(int walletId, WalletCreditCardRequestModel request);

    /**
     * Adds a new credit card to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletModel> addWalletCreditCardAsync(int walletId, WalletCreditCardRequestModel request, final ServiceCallback<WalletModel> serviceCallback);

    /**
     * Adds a new credit card to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<WalletModel> addWalletCreditCardAsync(int walletId, WalletCreditCardRequestModel request);

    /**
     * Adds a new credit card to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<ServiceResponse<WalletModel>> addWalletCreditCardWithServiceResponseAsync(int walletId, WalletCreditCardRequestModel request);

    /**
     * Adds a new bank account to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WalletModel object if successful.
     */
    WalletModel addWalletBankAccount(int walletId, WalletBankAccountRequestModel request);

    /**
     * Adds a new bank account to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WalletModel> addWalletBankAccountAsync(int walletId, WalletBankAccountRequestModel request, final ServiceCallback<WalletModel> serviceCallback);

    /**
     * Adds a new bank account to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<WalletModel> addWalletBankAccountAsync(int walletId, WalletBankAccountRequestModel request);

    /**
     * Adds a new bank account to the wallet.
     *
     * @param walletId The wallet identifier.
     * @param request The request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WalletModel object
     */
    Observable<ServiceResponse<WalletModel>> addWalletBankAccountWithServiceResponseAsync(int walletId, WalletBankAccountRequestModel request);

    /**
     * Deletes the wallet bank account.
     *
     * @param walletId The wallet identifier.
     * @param walletBankAcctId The wallet bank acct identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void removeWalletBankAccount(int walletId, int walletBankAcctId);

    /**
     * Deletes the wallet bank account.
     *
     * @param walletId The wallet identifier.
     * @param walletBankAcctId The wallet bank acct identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> removeWalletBankAccountAsync(int walletId, int walletBankAcctId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the wallet bank account.
     *
     * @param walletId The wallet identifier.
     * @param walletBankAcctId The wallet bank acct identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> removeWalletBankAccountAsync(int walletId, int walletBankAcctId);

    /**
     * Deletes the wallet bank account.
     *
     * @param walletId The wallet identifier.
     * @param walletBankAcctId The wallet bank acct identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> removeWalletBankAccountWithServiceResponseAsync(int walletId, int walletBankAcctId);

    /**
     * Deletes the wallet credit card.
     *
     * @param walletId The wallet identifier.
     * @param walletCreditCardId The wallet credit card identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void removeWalletCreditCard(int walletId, int walletCreditCardId);

    /**
     * Deletes the wallet credit card.
     *
     * @param walletId The wallet identifier.
     * @param walletCreditCardId The wallet credit card identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> removeWalletCreditCardAsync(int walletId, int walletCreditCardId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the wallet credit card.
     *
     * @param walletId The wallet identifier.
     * @param walletCreditCardId The wallet credit card identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> removeWalletCreditCardAsync(int walletId, int walletCreditCardId);

    /**
     * Deletes the wallet credit card.
     *
     * @param walletId The wallet identifier.
     * @param walletCreditCardId The wallet credit card identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> removeWalletCreditCardWithServiceResponseAsync(int walletId, int walletCreditCardId);

}
